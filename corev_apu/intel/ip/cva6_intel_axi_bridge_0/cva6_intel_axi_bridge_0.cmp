	component cva6_intel_axi_bridge_0 is
		generic (
			USE_PIPELINE              : integer := 1;
			USE_M0_AWID               : integer := 1;
			USE_M0_AWREGION           : integer := 0;
			USE_M0_AWLEN              : integer := 1;
			USE_M0_AWSIZE             : integer := 1;
			USE_M0_AWBURST            : integer := 1;
			USE_M0_AWLOCK             : integer := 1;
			USE_M0_AWCACHE            : integer := 1;
			USE_M0_AWQOS              : integer := 0;
			USE_S0_AWREGION           : integer := 0;
			USE_S0_AWLOCK             : integer := 1;
			USE_S0_AWCACHE            : integer := 1;
			USE_S0_AWQOS              : integer := 0;
			USE_S0_AWPROT             : integer := 1;
			USE_M0_WSTRB              : integer := 1;
			USE_S0_WLAST              : integer := 1;
			USE_M0_BID                : integer := 1;
			USE_M0_BRESP              : integer := 1;
			USE_S0_BRESP              : integer := 1;
			USE_M0_ARID               : integer := 1;
			USE_M0_ARREGION           : integer := 0;
			USE_M0_ARLEN              : integer := 1;
			USE_M0_ARSIZE             : integer := 1;
			USE_M0_ARBURST            : integer := 1;
			USE_M0_ARLOCK             : integer := 1;
			USE_M0_ARCACHE            : integer := 1;
			USE_M0_ARQOS              : integer := 0;
			USE_S0_ARREGION           : integer := 0;
			USE_S0_ARLOCK             : integer := 1;
			USE_S0_ARCACHE            : integer := 1;
			USE_S0_ARQOS              : integer := 0;
			USE_S0_ARPROT             : integer := 1;
			USE_M0_RID                : integer := 1;
			USE_M0_RRESP              : integer := 1;
			USE_M0_RLAST              : integer := 1;
			USE_S0_RRESP              : integer := 1;
			M0_ID_WIDTH               : integer := 8;
			S0_ID_WIDTH               : integer := 8;
			DATA_WIDTH                : integer := 64;
			WRITE_ADDR_USER_WIDTH     : integer := 32;
			READ_ADDR_USER_WIDTH      : integer := 32;
			WRITE_DATA_USER_WIDTH     : integer := 32;
			WRITE_RESP_USER_WIDTH     : integer := 32;
			READ_DATA_USER_WIDTH      : integer := 32;
			ADDR_WIDTH                : integer := 64;
			USE_S0_AWUSER             : integer := 0;
			USE_S0_ARUSER             : integer := 0;
			USE_S0_WUSER              : integer := 0;
			USE_S0_RUSER              : integer := 0;
			USE_S0_BUSER              : integer := 0;
			USE_M0_AWUSER             : integer := 0;
			USE_M0_ARUSER             : integer := 0;
			USE_M0_WUSER              : integer := 0;
			USE_M0_RUSER              : integer := 0;
			USE_M0_BUSER              : integer := 0;
			AXI_VERSION               : string  := "AXI4";
			ACE_LITE_SUPPORT          : integer := 0;
			SYNC_RESET                : integer := 0;
			BACKPRESSURE_DURING_RESET : integer := 0
		);
		port (
			aclk       : in  std_logic                     := 'X';             -- clk
			aresetn    : in  std_logic                     := 'X';             -- reset_n
			s0_awid    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- awid
			s0_awaddr  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- awaddr
			s0_awlen   : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- awlen
			s0_awsize  : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- awsize
			s0_awburst : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- awburst
			s0_awlock  : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- awlock
			s0_awcache : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- awcache
			s0_awprot  : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- awprot
			s0_awvalid : in  std_logic                     := 'X';             -- awvalid
			s0_awready : out std_logic;                                        -- awready
			s0_wdata   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- wdata
			s0_wstrb   : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- wstrb
			s0_wlast   : in  std_logic                     := 'X';             -- wlast
			s0_wvalid  : in  std_logic                     := 'X';             -- wvalid
			s0_wready  : out std_logic;                                        -- wready
			s0_bid     : out std_logic_vector(7 downto 0);                     -- bid
			s0_bresp   : out std_logic_vector(1 downto 0);                     -- bresp
			s0_bvalid  : out std_logic;                                        -- bvalid
			s0_bready  : in  std_logic                     := 'X';             -- bready
			s0_arid    : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- arid
			s0_araddr  : in  std_logic_vector(63 downto 0) := (others => 'X'); -- araddr
			s0_arlen   : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- arlen
			s0_arsize  : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- arsize
			s0_arburst : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- arburst
			s0_arlock  : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- arlock
			s0_arcache : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- arcache
			s0_arprot  : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- arprot
			s0_arvalid : in  std_logic                     := 'X';             -- arvalid
			s0_arready : out std_logic;                                        -- arready
			s0_rid     : out std_logic_vector(7 downto 0);                     -- rid
			s0_rdata   : out std_logic_vector(63 downto 0);                    -- rdata
			s0_rresp   : out std_logic_vector(1 downto 0);                     -- rresp
			s0_rlast   : out std_logic;                                        -- rlast
			s0_rvalid  : out std_logic;                                        -- rvalid
			s0_rready  : in  std_logic                     := 'X';             -- rready
			m0_awid    : out std_logic_vector(7 downto 0);                     -- awid
			m0_awaddr  : out std_logic_vector(63 downto 0);                    -- awaddr
			m0_awlen   : out std_logic_vector(7 downto 0);                     -- awlen
			m0_awsize  : out std_logic_vector(2 downto 0);                     -- awsize
			m0_awburst : out std_logic_vector(1 downto 0);                     -- awburst
			m0_awlock  : out std_logic_vector(0 downto 0);                     -- awlock
			m0_awcache : out std_logic_vector(3 downto 0);                     -- awcache
			m0_awprot  : out std_logic_vector(2 downto 0);                     -- awprot
			m0_awvalid : out std_logic;                                        -- awvalid
			m0_awready : in  std_logic                     := 'X';             -- awready
			m0_wdata   : out std_logic_vector(63 downto 0);                    -- wdata
			m0_wstrb   : out std_logic_vector(7 downto 0);                     -- wstrb
			m0_wlast   : out std_logic;                                        -- wlast
			m0_wvalid  : out std_logic;                                        -- wvalid
			m0_wready  : in  std_logic                     := 'X';             -- wready
			m0_bid     : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- bid
			m0_bresp   : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- bresp
			m0_bvalid  : in  std_logic                     := 'X';             -- bvalid
			m0_bready  : out std_logic;                                        -- bready
			m0_arid    : out std_logic_vector(7 downto 0);                     -- arid
			m0_araddr  : out std_logic_vector(63 downto 0);                    -- araddr
			m0_arlen   : out std_logic_vector(7 downto 0);                     -- arlen
			m0_arsize  : out std_logic_vector(2 downto 0);                     -- arsize
			m0_arburst : out std_logic_vector(1 downto 0);                     -- arburst
			m0_arlock  : out std_logic_vector(0 downto 0);                     -- arlock
			m0_arcache : out std_logic_vector(3 downto 0);                     -- arcache
			m0_arprot  : out std_logic_vector(2 downto 0);                     -- arprot
			m0_arvalid : out std_logic;                                        -- arvalid
			m0_arready : in  std_logic                     := 'X';             -- arready
			m0_rid     : in  std_logic_vector(7 downto 0)  := (others => 'X'); -- rid
			m0_rdata   : in  std_logic_vector(63 downto 0) := (others => 'X'); -- rdata
			m0_rresp   : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- rresp
			m0_rlast   : in  std_logic                     := 'X';             -- rlast
			m0_rvalid  : in  std_logic                     := 'X';             -- rvalid
			m0_rready  : out std_logic                                         -- rready
		);
	end component cva6_intel_axi_bridge_0;

