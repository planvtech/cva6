// cva6_intel_altera_mm_interconnect_1920_v5r556a.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.1 115

`timescale 1 ps / 1 ps
module cva6_intel_altera_mm_interconnect_1920_v5r556a (
		input  wire [7:0]  axi_bridge_1_m0_awid,                                             //                                            axi_bridge_1_m0.awid
		input  wire [63:0] axi_bridge_1_m0_awaddr,                                           //                                                           .awaddr
		input  wire [7:0]  axi_bridge_1_m0_awlen,                                            //                                                           .awlen
		input  wire [2:0]  axi_bridge_1_m0_awsize,                                           //                                                           .awsize
		input  wire [1:0]  axi_bridge_1_m0_awburst,                                          //                                                           .awburst
		input  wire [0:0]  axi_bridge_1_m0_awlock,                                           //                                                           .awlock
		input  wire [3:0]  axi_bridge_1_m0_awcache,                                          //                                                           .awcache
		input  wire [2:0]  axi_bridge_1_m0_awprot,                                           //                                                           .awprot
		input  wire        axi_bridge_1_m0_awvalid,                                          //                                                           .awvalid
		output wire        axi_bridge_1_m0_awready,                                          //                                                           .awready
		input  wire [63:0] axi_bridge_1_m0_wdata,                                            //                                                           .wdata
		input  wire [7:0]  axi_bridge_1_m0_wstrb,                                            //                                                           .wstrb
		input  wire        axi_bridge_1_m0_wlast,                                            //                                                           .wlast
		input  wire        axi_bridge_1_m0_wvalid,                                           //                                                           .wvalid
		output wire        axi_bridge_1_m0_wready,                                           //                                                           .wready
		output wire [7:0]  axi_bridge_1_m0_bid,                                              //                                                           .bid
		output wire [1:0]  axi_bridge_1_m0_bresp,                                            //                                                           .bresp
		output wire        axi_bridge_1_m0_bvalid,                                           //                                                           .bvalid
		input  wire        axi_bridge_1_m0_bready,                                           //                                                           .bready
		input  wire [7:0]  axi_bridge_1_m0_arid,                                             //                                                           .arid
		input  wire [63:0] axi_bridge_1_m0_araddr,                                           //                                                           .araddr
		input  wire [7:0]  axi_bridge_1_m0_arlen,                                            //                                                           .arlen
		input  wire [2:0]  axi_bridge_1_m0_arsize,                                           //                                                           .arsize
		input  wire [1:0]  axi_bridge_1_m0_arburst,                                          //                                                           .arburst
		input  wire [0:0]  axi_bridge_1_m0_arlock,                                           //                                                           .arlock
		input  wire [3:0]  axi_bridge_1_m0_arcache,                                          //                                                           .arcache
		input  wire [2:0]  axi_bridge_1_m0_arprot,                                           //                                                           .arprot
		input  wire        axi_bridge_1_m0_arvalid,                                          //                                                           .arvalid
		output wire        axi_bridge_1_m0_arready,                                          //                                                           .arready
		output wire [7:0]  axi_bridge_1_m0_rid,                                              //                                                           .rid
		output wire [63:0] axi_bridge_1_m0_rdata,                                            //                                                           .rdata
		output wire [1:0]  axi_bridge_1_m0_rresp,                                            //                                                           .rresp
		output wire        axi_bridge_1_m0_rlast,                                            //                                                           .rlast
		output wire        axi_bridge_1_m0_rvalid,                                           //                                                           .rvalid
		input  wire        axi_bridge_1_m0_rready,                                           //                                                           .rready
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                            //                              jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                              //                                                           .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                               //                                                           .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                           //                                                           .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                          //                                                           .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                        //                                                           .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                         //                                                           .chipselect
		input  wire        axi_bridge_1_clk_reset_reset_bridge_in_reset_reset,               //               axi_bridge_1_clk_reset_reset_bridge_in_reset.reset,      Reset Input
		input  wire        axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset, // axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset.reset,      Reset Input
		input  wire        emif_fm_0_emif_usr_clk_clk                                        //                                     emif_fm_0_emif_usr_clk.clk,        Clock Input
	);

	wire    [0:0] axi_bridge_1_m0_translator_m0_ruser;                               // axi_bridge_1_m0_agent:ruser -> axi_bridge_1_m0_translator:m0_ruser
	wire    [0:0] axi_bridge_1_m0_translator_m0_wuser;                               // axi_bridge_1_m0_translator:m0_wuser -> axi_bridge_1_m0_agent:wuser
	wire    [1:0] axi_bridge_1_m0_translator_m0_awburst;                             // axi_bridge_1_m0_translator:m0_awburst -> axi_bridge_1_m0_agent:awburst
	wire    [3:0] axi_bridge_1_m0_translator_m0_arregion;                            // axi_bridge_1_m0_translator:m0_arregion -> axi_bridge_1_m0_agent:arregion
	wire    [0:0] axi_bridge_1_m0_translator_m0_awuser;                              // axi_bridge_1_m0_translator:m0_awuser -> axi_bridge_1_m0_agent:awuser
	wire    [7:0] axi_bridge_1_m0_translator_m0_arlen;                               // axi_bridge_1_m0_translator:m0_arlen -> axi_bridge_1_m0_agent:arlen
	wire    [3:0] axi_bridge_1_m0_translator_m0_arqos;                               // axi_bridge_1_m0_translator:m0_arqos -> axi_bridge_1_m0_agent:arqos
	wire    [7:0] axi_bridge_1_m0_translator_m0_wstrb;                               // axi_bridge_1_m0_translator:m0_wstrb -> axi_bridge_1_m0_agent:wstrb
	wire          axi_bridge_1_m0_translator_m0_wready;                              // axi_bridge_1_m0_agent:wready -> axi_bridge_1_m0_translator:m0_wready
	wire    [7:0] axi_bridge_1_m0_translator_m0_rid;                                 // axi_bridge_1_m0_agent:rid -> axi_bridge_1_m0_translator:m0_rid
	wire          axi_bridge_1_m0_translator_m0_rready;                              // axi_bridge_1_m0_translator:m0_rready -> axi_bridge_1_m0_agent:rready
	wire    [7:0] axi_bridge_1_m0_translator_m0_awlen;                               // axi_bridge_1_m0_translator:m0_awlen -> axi_bridge_1_m0_agent:awlen
	wire    [3:0] axi_bridge_1_m0_translator_m0_awqos;                               // axi_bridge_1_m0_translator:m0_awqos -> axi_bridge_1_m0_agent:awqos
	wire    [3:0] axi_bridge_1_m0_translator_m0_arcache;                             // axi_bridge_1_m0_translator:m0_arcache -> axi_bridge_1_m0_agent:arcache
	wire          axi_bridge_1_m0_translator_m0_wvalid;                              // axi_bridge_1_m0_translator:m0_wvalid -> axi_bridge_1_m0_agent:wvalid
	wire   [63:0] axi_bridge_1_m0_translator_m0_araddr;                              // axi_bridge_1_m0_translator:m0_araddr -> axi_bridge_1_m0_agent:araddr
	wire    [2:0] axi_bridge_1_m0_translator_m0_arprot;                              // axi_bridge_1_m0_translator:m0_arprot -> axi_bridge_1_m0_agent:arprot
	wire    [2:0] axi_bridge_1_m0_translator_m0_awprot;                              // axi_bridge_1_m0_translator:m0_awprot -> axi_bridge_1_m0_agent:awprot
	wire   [63:0] axi_bridge_1_m0_translator_m0_wdata;                               // axi_bridge_1_m0_translator:m0_wdata -> axi_bridge_1_m0_agent:wdata
	wire          axi_bridge_1_m0_translator_m0_arvalid;                             // axi_bridge_1_m0_translator:m0_arvalid -> axi_bridge_1_m0_agent:arvalid
	wire    [3:0] axi_bridge_1_m0_translator_m0_awcache;                             // axi_bridge_1_m0_translator:m0_awcache -> axi_bridge_1_m0_agent:awcache
	wire    [7:0] axi_bridge_1_m0_translator_m0_arid;                                // axi_bridge_1_m0_translator:m0_arid -> axi_bridge_1_m0_agent:arid
	wire    [0:0] axi_bridge_1_m0_translator_m0_arlock;                              // axi_bridge_1_m0_translator:m0_arlock -> axi_bridge_1_m0_agent:arlock
	wire    [0:0] axi_bridge_1_m0_translator_m0_awlock;                              // axi_bridge_1_m0_translator:m0_awlock -> axi_bridge_1_m0_agent:awlock
	wire   [63:0] axi_bridge_1_m0_translator_m0_awaddr;                              // axi_bridge_1_m0_translator:m0_awaddr -> axi_bridge_1_m0_agent:awaddr
	wire    [1:0] axi_bridge_1_m0_translator_m0_bresp;                               // axi_bridge_1_m0_agent:bresp -> axi_bridge_1_m0_translator:m0_bresp
	wire          axi_bridge_1_m0_translator_m0_arready;                             // axi_bridge_1_m0_agent:arready -> axi_bridge_1_m0_translator:m0_arready
	wire   [63:0] axi_bridge_1_m0_translator_m0_rdata;                               // axi_bridge_1_m0_agent:rdata -> axi_bridge_1_m0_translator:m0_rdata
	wire          axi_bridge_1_m0_translator_m0_awready;                             // axi_bridge_1_m0_agent:awready -> axi_bridge_1_m0_translator:m0_awready
	wire    [1:0] axi_bridge_1_m0_translator_m0_arburst;                             // axi_bridge_1_m0_translator:m0_arburst -> axi_bridge_1_m0_agent:arburst
	wire    [2:0] axi_bridge_1_m0_translator_m0_arsize;                              // axi_bridge_1_m0_translator:m0_arsize -> axi_bridge_1_m0_agent:arsize
	wire          axi_bridge_1_m0_translator_m0_bready;                              // axi_bridge_1_m0_translator:m0_bready -> axi_bridge_1_m0_agent:bready
	wire          axi_bridge_1_m0_translator_m0_rlast;                               // axi_bridge_1_m0_agent:rlast -> axi_bridge_1_m0_translator:m0_rlast
	wire          axi_bridge_1_m0_translator_m0_wlast;                               // axi_bridge_1_m0_translator:m0_wlast -> axi_bridge_1_m0_agent:wlast
	wire    [3:0] axi_bridge_1_m0_translator_m0_awregion;                            // axi_bridge_1_m0_translator:m0_awregion -> axi_bridge_1_m0_agent:awregion
	wire    [0:0] axi_bridge_1_m0_translator_m0_buser;                               // axi_bridge_1_m0_agent:buser -> axi_bridge_1_m0_translator:m0_buser
	wire    [1:0] axi_bridge_1_m0_translator_m0_rresp;                               // axi_bridge_1_m0_agent:rresp -> axi_bridge_1_m0_translator:m0_rresp
	wire    [7:0] axi_bridge_1_m0_translator_m0_awid;                                // axi_bridge_1_m0_translator:m0_awid -> axi_bridge_1_m0_agent:awid
	wire    [7:0] axi_bridge_1_m0_translator_m0_bid;                                 // axi_bridge_1_m0_agent:bid -> axi_bridge_1_m0_translator:m0_bid
	wire          axi_bridge_1_m0_translator_m0_bvalid;                              // axi_bridge_1_m0_agent:bvalid -> axi_bridge_1_m0_translator:m0_bvalid
	wire    [2:0] axi_bridge_1_m0_translator_m0_awsize;                              // axi_bridge_1_m0_translator:m0_awsize -> axi_bridge_1_m0_agent:awsize
	wire          axi_bridge_1_m0_translator_m0_awvalid;                             // axi_bridge_1_m0_translator:m0_awvalid -> axi_bridge_1_m0_agent:awvalid
	wire    [0:0] axi_bridge_1_m0_translator_m0_aruser;                              // axi_bridge_1_m0_translator:m0_aruser -> axi_bridge_1_m0_agent:aruser
	wire          axi_bridge_1_m0_translator_m0_rvalid;                              // axi_bridge_1_m0_agent:rvalid -> axi_bridge_1_m0_translator:m0_rvalid
	wire          rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> axi_bridge_1_m0_agent:write_rp_valid
	wire  [217:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> axi_bridge_1_m0_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                 // axi_bridge_1_m0_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [1:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> axi_bridge_1_m0_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> axi_bridge_1_m0_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> axi_bridge_1_m0_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                             // rsp_mux_001:src_valid -> axi_bridge_1_m0_agent:read_rp_valid
	wire  [217:0] rsp_mux_001_src_data;                                              // rsp_mux_001:src_data -> axi_bridge_1_m0_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                             // axi_bridge_1_m0_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [1:0] rsp_mux_001_src_channel;                                           // rsp_mux_001:src_channel -> axi_bridge_1_m0_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                     // rsp_mux_001:src_startofpacket -> axi_bridge_1_m0_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                       // rsp_mux_001:src_endofpacket -> axi_bridge_1_m0_agent:read_rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                   // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [63:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                    // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                 // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                       // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;              // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                       // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                  // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                      // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                 // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;               // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [182:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;               // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;       // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;         // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;            // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [182:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;            // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;    // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;      // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;          // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;          // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;          // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;           // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;          // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          axi_bridge_1_m0_agent_write_cp_valid;                              // axi_bridge_1_m0_agent:write_cp_valid -> router:sink_valid
	wire  [217:0] axi_bridge_1_m0_agent_write_cp_data;                               // axi_bridge_1_m0_agent:write_cp_data -> router:sink_data
	wire          axi_bridge_1_m0_agent_write_cp_ready;                              // router:sink_ready -> axi_bridge_1_m0_agent:write_cp_ready
	wire          axi_bridge_1_m0_agent_write_cp_startofpacket;                      // axi_bridge_1_m0_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          axi_bridge_1_m0_agent_write_cp_endofpacket;                        // axi_bridge_1_m0_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [217:0] router_src_data;                                                   // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                  // cmd_demux:sink_ready -> router:src_ready
	wire    [1:0] router_src_channel;                                                // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          axi_bridge_1_m0_agent_read_cp_valid;                               // axi_bridge_1_m0_agent:read_cp_valid -> router_001:sink_valid
	wire  [217:0] axi_bridge_1_m0_agent_read_cp_data;                                // axi_bridge_1_m0_agent:read_cp_data -> router_001:sink_data
	wire          axi_bridge_1_m0_agent_read_cp_ready;                               // router_001:sink_ready -> axi_bridge_1_m0_agent:read_cp_ready
	wire          axi_bridge_1_m0_agent_read_cp_startofpacket;                       // axi_bridge_1_m0_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          axi_bridge_1_m0_agent_read_cp_endofpacket;                         // axi_bridge_1_m0_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                              // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [217:0] router_001_src_data;                                               // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                              // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [1:0] router_001_src_channel;                                            // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                      // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                        // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                      // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [181:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                       // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                      // router_002:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;              // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid;         // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [181:0] jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data;          // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready;         // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [1:0] jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel;       // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket; // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket;   // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [217:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [1:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                          // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [217:0] cmd_demux_001_src0_data;                                           // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                          // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [1:0] cmd_demux_001_src0_channel;                                        // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                  // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                    // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [217:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [1:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                              // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [217:0] rsp_demux_src1_data;                                               // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                              // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [1:0] rsp_demux_src1_channel;                                            // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                      // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                        // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          router_002_src_valid;                                              // router_002:src_valid -> jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:in_valid
	wire  [181:0] router_002_src_data;                                               // router_002:src_data -> jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                              // jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [1:0] router_002_src_channel;                                            // router_002:src_channel -> jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                      // router_002:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                        // router_002:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_valid;         // jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [217:0] jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_data;          // jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:out_ready
	wire    [1:0] jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_channel;       // jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_startofpacket; // jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_endofpacket;   // jtag_uart_0_avalon_jtag_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:in_valid
	wire  [217:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                 // jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [1:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_valid;         // jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:out_valid -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [181:0] jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_data;          // jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:out_data -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_data
	wire          jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_ready;         // jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_ready -> jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:out_ready
	wire    [1:0] jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_channel;       // jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:out_channel -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_startofpacket; // jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_endofpacket;   // jtag_uart_0_avalon_jtag_slave_cmd_width_adapter:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_endofpacket

	cva6_intel_altera_merlin_axi_translator_1950_sjnedva #(
		.USE_S0_AWID                       (1),
		.USE_S0_AWREGION                   (0),
		.USE_M0_AWREGION                   (1),
		.USE_S0_AWLEN                      (1),
		.USE_S0_AWSIZE                     (1),
		.USE_S0_AWBURST                    (1),
		.USE_S0_AWLOCK                     (1),
		.USE_M0_AWLOCK                     (1),
		.USE_S0_AWCACHE                    (1),
		.USE_M0_AWCACHE                    (1),
		.USE_M0_AWPROT                     (1),
		.USE_S0_AWQOS                      (0),
		.USE_M0_AWQOS                      (1),
		.USE_S0_WSTRB                      (1),
		.USE_M0_WLAST                      (1),
		.USE_S0_BID                        (1),
		.USE_S0_BRESP                      (1),
		.USE_M0_BRESP                      (1),
		.USE_S0_ARID                       (1),
		.USE_S0_ARREGION                   (0),
		.USE_M0_ARREGION                   (1),
		.USE_S0_ARLEN                      (1),
		.USE_S0_ARSIZE                     (1),
		.USE_S0_ARBURST                    (1),
		.USE_S0_ARLOCK                     (1),
		.USE_M0_ARLOCK                     (1),
		.USE_M0_ARCACHE                    (1),
		.USE_M0_ARQOS                      (1),
		.USE_M0_ARPROT                     (1),
		.USE_S0_ARCACHE                    (1),
		.USE_S0_ARQOS                      (0),
		.USE_S0_RID                        (1),
		.USE_S0_RRESP                      (1),
		.USE_M0_RRESP                      (1),
		.USE_S0_RLAST                      (1),
		.M0_ID_WIDTH                       (8),
		.DATA_WIDTH                        (64),
		.M0_SAI_WIDTH                      (4),
		.S0_SAI_WIDTH                      (4),
		.USER_DATA_WIDTH                   (4),
		.M0_USER_ADDRCHK_WIDTH             (4),
		.S0_USER_ADDRCHK_WIDTH             (4),
		.S0_ID_WIDTH                       (8),
		.M0_ADDR_WIDTH                     (64),
		.S0_WRITE_ADDR_USER_WIDTH          (1),
		.S0_READ_ADDR_USER_WIDTH           (1),
		.M0_WRITE_ADDR_USER_WIDTH          (1),
		.M0_READ_ADDR_USER_WIDTH           (1),
		.S0_WRITE_DATA_USER_WIDTH          (1),
		.S0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.S0_READ_DATA_USER_WIDTH           (1),
		.M0_WRITE_DATA_USER_WIDTH          (1),
		.M0_WRITE_RESPONSE_DATA_USER_WIDTH (1),
		.M0_READ_DATA_USER_WIDTH           (1),
		.S0_ADDR_WIDTH                     (64),
		.USE_S0_AWUSER                     (0),
		.USE_S0_ARUSER                     (0),
		.USE_S0_WUSER                      (0),
		.USE_S0_RUSER                      (0),
		.USE_S0_BUSER                      (0),
		.USE_M0_AWUSER                     (1),
		.USE_M0_ARUSER                     (1),
		.USE_M0_WUSER                      (1),
		.USE_M0_RUSER                      (1),
		.USE_M0_BUSER                      (1),
		.M0_AXI_VERSION                    ("AXI4"),
		.M0_BURST_LENGTH_WIDTH             (8),
		.S0_BURST_LENGTH_WIDTH             (8),
		.M0_LOCK_WIDTH                     (1),
		.S0_LOCK_WIDTH                     (1),
		.S0_AXI_VERSION                    ("AXI4"),
		.ACE_LITE_SUPPORT                  (0),
		.USE_M0_AWUSER_ADDRCHK             (0),
		.USE_M0_AWUSER_SAI                 (0),
		.USE_M0_ARUSER_ADDRCHK             (0),
		.USE_M0_ARUSER_SAI                 (0),
		.USE_M0_WUSER_DATACHK              (0),
		.USE_M0_WUSER_POISON               (0),
		.USE_M0_RUSER_DATACHK              (0),
		.USE_M0_RUSER_POISON               (0),
		.USE_M0_WUSER_DATA                 (0),
		.USE_M0_RUSER_DATA                 (0),
		.USE_S0_AWUSER_ADDRCHK             (0),
		.USE_S0_AWUSER_SAI                 (0),
		.USE_S0_ARUSER_ADDRCHK             (0),
		.USE_S0_ARUSER_SAI                 (0),
		.USE_S0_WUSER_DATACHK              (0),
		.USE_S0_WUSER_POISON               (0),
		.USE_S0_RUSER_DATACHK              (0),
		.USE_S0_WUSER_DATA                 (0),
		.USE_S0_RUSER_DATA                 (0),
		.USE_S0_RUSER_POISON               (0),
		.REGENERATE_ADDRCHK                (0),
		.ROLE_BASED_USER                   (0)
	) axi_bridge_1_m0_translator (
		.aclk              (emif_fm_0_emif_usr_clk_clk),                                        //   input,   width = 1,       clk.clk
		.aresetn           (~axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset_n
		.m0_awid           (axi_bridge_1_m0_translator_m0_awid),                                //  output,   width = 8,        m0.awid
		.m0_awaddr         (axi_bridge_1_m0_translator_m0_awaddr),                              //  output,  width = 64,          .awaddr
		.m0_awlen          (axi_bridge_1_m0_translator_m0_awlen),                               //  output,   width = 8,          .awlen
		.m0_awsize         (axi_bridge_1_m0_translator_m0_awsize),                              //  output,   width = 3,          .awsize
		.m0_awburst        (axi_bridge_1_m0_translator_m0_awburst),                             //  output,   width = 2,          .awburst
		.m0_awlock         (axi_bridge_1_m0_translator_m0_awlock),                              //  output,   width = 1,          .awlock
		.m0_awcache        (axi_bridge_1_m0_translator_m0_awcache),                             //  output,   width = 4,          .awcache
		.m0_awprot         (axi_bridge_1_m0_translator_m0_awprot),                              //  output,   width = 3,          .awprot
		.m0_awuser         (axi_bridge_1_m0_translator_m0_awuser),                              //  output,   width = 1,          .awuser
		.m0_awqos          (axi_bridge_1_m0_translator_m0_awqos),                               //  output,   width = 4,          .awqos
		.m0_awregion       (axi_bridge_1_m0_translator_m0_awregion),                            //  output,   width = 4,          .awregion
		.m0_awvalid        (axi_bridge_1_m0_translator_m0_awvalid),                             //  output,   width = 1,          .awvalid
		.m0_awready        (axi_bridge_1_m0_translator_m0_awready),                             //   input,   width = 1,          .awready
		.m0_wdata          (axi_bridge_1_m0_translator_m0_wdata),                               //  output,  width = 64,          .wdata
		.m0_wstrb          (axi_bridge_1_m0_translator_m0_wstrb),                               //  output,   width = 8,          .wstrb
		.m0_wlast          (axi_bridge_1_m0_translator_m0_wlast),                               //  output,   width = 1,          .wlast
		.m0_wvalid         (axi_bridge_1_m0_translator_m0_wvalid),                              //  output,   width = 1,          .wvalid
		.m0_wuser          (axi_bridge_1_m0_translator_m0_wuser),                               //  output,   width = 1,          .wuser
		.m0_wready         (axi_bridge_1_m0_translator_m0_wready),                              //   input,   width = 1,          .wready
		.m0_bid            (axi_bridge_1_m0_translator_m0_bid),                                 //   input,   width = 8,          .bid
		.m0_bresp          (axi_bridge_1_m0_translator_m0_bresp),                               //   input,   width = 2,          .bresp
		.m0_buser          (axi_bridge_1_m0_translator_m0_buser),                               //   input,   width = 1,          .buser
		.m0_bvalid         (axi_bridge_1_m0_translator_m0_bvalid),                              //   input,   width = 1,          .bvalid
		.m0_bready         (axi_bridge_1_m0_translator_m0_bready),                              //  output,   width = 1,          .bready
		.m0_arid           (axi_bridge_1_m0_translator_m0_arid),                                //  output,   width = 8,          .arid
		.m0_araddr         (axi_bridge_1_m0_translator_m0_araddr),                              //  output,  width = 64,          .araddr
		.m0_arlen          (axi_bridge_1_m0_translator_m0_arlen),                               //  output,   width = 8,          .arlen
		.m0_arsize         (axi_bridge_1_m0_translator_m0_arsize),                              //  output,   width = 3,          .arsize
		.m0_arburst        (axi_bridge_1_m0_translator_m0_arburst),                             //  output,   width = 2,          .arburst
		.m0_arlock         (axi_bridge_1_m0_translator_m0_arlock),                              //  output,   width = 1,          .arlock
		.m0_arcache        (axi_bridge_1_m0_translator_m0_arcache),                             //  output,   width = 4,          .arcache
		.m0_arprot         (axi_bridge_1_m0_translator_m0_arprot),                              //  output,   width = 3,          .arprot
		.m0_aruser         (axi_bridge_1_m0_translator_m0_aruser),                              //  output,   width = 1,          .aruser
		.m0_arqos          (axi_bridge_1_m0_translator_m0_arqos),                               //  output,   width = 4,          .arqos
		.m0_arregion       (axi_bridge_1_m0_translator_m0_arregion),                            //  output,   width = 4,          .arregion
		.m0_arvalid        (axi_bridge_1_m0_translator_m0_arvalid),                             //  output,   width = 1,          .arvalid
		.m0_arready        (axi_bridge_1_m0_translator_m0_arready),                             //   input,   width = 1,          .arready
		.m0_rid            (axi_bridge_1_m0_translator_m0_rid),                                 //   input,   width = 8,          .rid
		.m0_rdata          (axi_bridge_1_m0_translator_m0_rdata),                               //   input,  width = 64,          .rdata
		.m0_rresp          (axi_bridge_1_m0_translator_m0_rresp),                               //   input,   width = 2,          .rresp
		.m0_rlast          (axi_bridge_1_m0_translator_m0_rlast),                               //   input,   width = 1,          .rlast
		.m0_rvalid         (axi_bridge_1_m0_translator_m0_rvalid),                              //   input,   width = 1,          .rvalid
		.m0_rready         (axi_bridge_1_m0_translator_m0_rready),                              //  output,   width = 1,          .rready
		.m0_ruser          (axi_bridge_1_m0_translator_m0_ruser),                               //   input,   width = 1,          .ruser
		.s0_awid           (axi_bridge_1_m0_awid),                                              //   input,   width = 8,        s0.awid
		.s0_awaddr         (axi_bridge_1_m0_awaddr),                                            //   input,  width = 64,          .awaddr
		.s0_awlen          (axi_bridge_1_m0_awlen),                                             //   input,   width = 8,          .awlen
		.s0_awsize         (axi_bridge_1_m0_awsize),                                            //   input,   width = 3,          .awsize
		.s0_awburst        (axi_bridge_1_m0_awburst),                                           //   input,   width = 2,          .awburst
		.s0_awlock         (axi_bridge_1_m0_awlock),                                            //   input,   width = 1,          .awlock
		.s0_awcache        (axi_bridge_1_m0_awcache),                                           //   input,   width = 4,          .awcache
		.s0_awprot         (axi_bridge_1_m0_awprot),                                            //   input,   width = 3,          .awprot
		.s0_awvalid        (axi_bridge_1_m0_awvalid),                                           //   input,   width = 1,          .awvalid
		.s0_awready        (axi_bridge_1_m0_awready),                                           //  output,   width = 1,          .awready
		.s0_wdata          (axi_bridge_1_m0_wdata),                                             //   input,  width = 64,          .wdata
		.s0_wstrb          (axi_bridge_1_m0_wstrb),                                             //   input,   width = 8,          .wstrb
		.s0_wlast          (axi_bridge_1_m0_wlast),                                             //   input,   width = 1,          .wlast
		.s0_wvalid         (axi_bridge_1_m0_wvalid),                                            //   input,   width = 1,          .wvalid
		.s0_wready         (axi_bridge_1_m0_wready),                                            //  output,   width = 1,          .wready
		.s0_bid            (axi_bridge_1_m0_bid),                                               //  output,   width = 8,          .bid
		.s0_bresp          (axi_bridge_1_m0_bresp),                                             //  output,   width = 2,          .bresp
		.s0_bvalid         (axi_bridge_1_m0_bvalid),                                            //  output,   width = 1,          .bvalid
		.s0_bready         (axi_bridge_1_m0_bready),                                            //   input,   width = 1,          .bready
		.s0_arid           (axi_bridge_1_m0_arid),                                              //   input,   width = 8,          .arid
		.s0_araddr         (axi_bridge_1_m0_araddr),                                            //   input,  width = 64,          .araddr
		.s0_arlen          (axi_bridge_1_m0_arlen),                                             //   input,   width = 8,          .arlen
		.s0_arsize         (axi_bridge_1_m0_arsize),                                            //   input,   width = 3,          .arsize
		.s0_arburst        (axi_bridge_1_m0_arburst),                                           //   input,   width = 2,          .arburst
		.s0_arlock         (axi_bridge_1_m0_arlock),                                            //   input,   width = 1,          .arlock
		.s0_arcache        (axi_bridge_1_m0_arcache),                                           //   input,   width = 4,          .arcache
		.s0_arprot         (axi_bridge_1_m0_arprot),                                            //   input,   width = 3,          .arprot
		.s0_arvalid        (axi_bridge_1_m0_arvalid),                                           //   input,   width = 1,          .arvalid
		.s0_arready        (axi_bridge_1_m0_arready),                                           //  output,   width = 1,          .arready
		.s0_rid            (axi_bridge_1_m0_rid),                                               //  output,   width = 8,          .rid
		.s0_rdata          (axi_bridge_1_m0_rdata),                                             //  output,  width = 64,          .rdata
		.s0_rresp          (axi_bridge_1_m0_rresp),                                             //  output,   width = 2,          .rresp
		.s0_rlast          (axi_bridge_1_m0_rlast),                                             //  output,   width = 1,          .rlast
		.s0_rvalid         (axi_bridge_1_m0_rvalid),                                            //  output,   width = 1,          .rvalid
		.s0_rready         (axi_bridge_1_m0_rready),                                            //   input,   width = 1,          .rready
		.m0_awuser_addrchk (),                                                                  // (terminated),                        
		.m0_awuser_sai     (),                                                                  // (terminated),                        
		.m0_wuser_datachk  (),                                                                  // (terminated),                        
		.m0_wuser_data     (),                                                                  // (terminated),                        
		.m0_wuser_poison   (),                                                                  // (terminated),                        
		.m0_aruser_addrchk (),                                                                  // (terminated),                        
		.m0_aruser_sai     (),                                                                  // (terminated),                        
		.m0_ruser_datachk  (8'b00000000),                                                       // (terminated),                        
		.m0_ruser_data     (4'b0000),                                                           // (terminated),                        
		.m0_ruser_poison   (1'b0),                                                              // (terminated),                        
		.s0_awuser         (1'b0),                                                              // (terminated),                        
		.s0_awuser_addrchk (4'b0000),                                                           // (terminated),                        
		.s0_awuser_sai     (4'b0000),                                                           // (terminated),                        
		.s0_awqos          (4'b0000),                                                           // (terminated),                        
		.s0_awregion       (4'b0000),                                                           // (terminated),                        
		.s0_wuser          (1'b0),                                                              // (terminated),                        
		.s0_wuser_datachk  (8'b00000000),                                                       // (terminated),                        
		.s0_wuser_data     (4'b0000),                                                           // (terminated),                        
		.s0_wuser_poison   (1'b0),                                                              // (terminated),                        
		.s0_buser          (),                                                                  // (terminated),                        
		.s0_aruser         (1'b0),                                                              // (terminated),                        
		.s0_aruser_addrchk (4'b0000),                                                           // (terminated),                        
		.s0_aruser_sai     (4'b0000),                                                           // (terminated),                        
		.s0_arqos          (4'b0000),                                                           // (terminated),                        
		.s0_arregion       (4'b0000),                                                           // (terminated),                        
		.s0_ruser          (),                                                                  // (terminated),                        
		.s0_ruser_datachk  (),                                                                  // (terminated),                        
		.s0_ruser_data     (),                                                                  // (terminated),                        
		.s0_ruser_poison   (),                                                                  // (terminated),                        
		.s0_wid            (8'b00000000),                                                       // (terminated),                        
		.s0_ardomain       (2'b00),                                                             // (terminated),                        
		.s0_arsnoop        (4'b0000),                                                           // (terminated),                        
		.s0_arbar          (2'b00),                                                             // (terminated),                        
		.s0_awdomain       (2'b00),                                                             // (terminated),                        
		.s0_awsnoop        (3'b000),                                                            // (terminated),                        
		.s0_awbar          (2'b00),                                                             // (terminated),                        
		.s0_awunique       (1'b0),                                                              // (terminated),                        
		.m0_wid            (),                                                                  // (terminated),                        
		.m0_ardomain       (),                                                                  // (terminated),                        
		.m0_arsnoop        (),                                                                  // (terminated),                        
		.m0_arbar          (),                                                                  // (terminated),                        
		.m0_awdomain       (),                                                                  // (terminated),                        
		.m0_awsnoop        (),                                                                  // (terminated),                        
		.m0_awbar          (),                                                                  // (terminated),                        
		.m0_awunique       ()                                                                   // (terminated),                        
	);

	cva6_intel_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (64),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (emif_fm_0_emif_usr_clk_clk),                                       //   input,   width = 1,                      clk.clk
		.reset                  (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                   //   input,  width = 64, avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),                //   input,   width = 3,                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                      //   input,   width = 1,                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                     //   input,   width = 1,                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),               //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),             //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),                //   input,   width = 4,                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                  //  output,  width = 32,                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),                 //   input,  width = 32,                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                      //   input,   width = 1,                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),               //   input,   width = 1,                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                            //  output,   width = 1,      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                              //  output,   width = 1,                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                               //  output,   width = 1,                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),                           //   input,  width = 32,                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),                          //  output,  width = 32,                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),                        //   input,   width = 1,                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),                         //  output,   width = 1,                         .chipselect
		.av_begintransfer       (),                                                                 // (terminated),                                       
		.av_beginbursttransfer  (),                                                                 // (terminated),                                       
		.av_burstcount          (),                                                                 // (terminated),                                       
		.av_byteenable          (),                                                                 // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                             // (terminated),                                       
		.av_writebyteenable     (),                                                                 // (terminated),                                       
		.av_lock                (),                                                                 // (terminated),                                       
		.av_clken               (),                                                                 // (terminated),                                       
		.uav_clken              (1'b0),                                                             // (terminated),                                       
		.av_debugaccess         (),                                                                 // (terminated),                                       
		.av_outputenable        (),                                                                 // (terminated),                                       
		.uav_response           (),                                                                 // (terminated),                                       
		.av_response            (2'b00),                                                            // (terminated),                                       
		.uav_writeresponsevalid (),                                                                 // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                              // (terminated),                                       
	);

	cva6_intel_altera_merlin_axi_master_ni_1980_4qd7sla #(
		.ID_WIDTH                  (8),
		.ADDR_WIDTH                (64),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (8),
		.AXI_LOCK_WIDTH            (1),
		.SAI_WIDTH                 (1),
		.ADDRCHK_WIDTH             (1),
		.USER_DATA_WIDTH           (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.AXI_VERSION               ("AXI4"),
		.ACE_LITE_SUPPORT          (0),
		.ROLE_BASED_USER           (0),
		.WRITE_ISSUING_CAPABILITY  (16),
		.READ_ISSUING_CAPABILITY   (16),
		.PKT_BEGIN_BURST           (169),
		.PKT_CACHE_H               (190),
		.PKT_CACHE_L               (187),
		.PKT_ADDR_SIDEBAND_H       (167),
		.PKT_ADDR_SIDEBAND_L       (167),
		.PKT_PROTECTION_H          (186),
		.PKT_PROTECTION_L          (184),
		.PKT_BURST_SIZE_H          (164),
		.PKT_BURST_SIZE_L          (162),
		.PKT_BURST_TYPE_H          (166),
		.PKT_BURST_TYPE_L          (165),
		.PKT_RESPONSE_STATUS_L     (191),
		.PKT_RESPONSE_STATUS_H     (192),
		.PKT_BURSTWRAP_H           (161),
		.PKT_BURSTWRAP_L           (154),
		.PKT_BYTE_CNT_H            (153),
		.PKT_BYTE_CNT_L            (142),
		.PKT_ADDR_H                (135),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (141),
		.PKT_TRANS_LOCK            (140),
		.PKT_TRANS_COMPRESSED_READ (136),
		.PKT_TRANS_POSTED          (137),
		.PKT_TRANS_WRITE           (138),
		.PKT_TRANS_READ            (139),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (174),
		.PKT_SRC_ID_L              (174),
		.PKT_DEST_ID_H             (175),
		.PKT_DEST_ID_L             (175),
		.PKT_THREAD_ID_H           (183),
		.PKT_THREAD_ID_L           (176),
		.PKT_QOS_L                 (170),
		.PKT_QOS_H                 (173),
		.PKT_ORI_BURST_SIZE_L      (193),
		.PKT_ORI_BURST_SIZE_H      (195),
		.PKT_DATA_SIDEBAND_H       (168),
		.PKT_DATA_SIDEBAND_L       (168),
		.PKT_DOMAIN_H              (203),
		.PKT_DOMAIN_L              (202),
		.PKT_SNOOP_H               (201),
		.PKT_SNOOP_L               (198),
		.PKT_BARRIER_H             (197),
		.PKT_BARRIER_L             (196),
		.PKT_WUNIQUE               (204),
		.PKT_EOP_OOO               (211),
		.PKT_SOP_OOO               (212),
		.PKT_POISON_H              (205),
		.PKT_POISON_L              (205),
		.PKT_DATACHK_H             (206),
		.PKT_DATACHK_L             (206),
		.PKT_ADDRCHK_H             (209),
		.PKT_ADDRCHK_L             (208),
		.PKT_SAI_H                 (210),
		.PKT_SAI_L                 (210),
		.PKT_USER_DATA_H           (207),
		.PKT_USER_DATA_L           (207),
		.ST_DATA_W                 (218),
		.ST_CHANNEL_W              (2),
		.ID                        (0),
		.SYNC_RESET                (1)
	) axi_bridge_1_m0_agent (
		.aclk                   (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,              clk.clk
		.aresetn                (~axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1,        clk_reset.reset_n
		.write_cp_valid         (axi_bridge_1_m0_agent_write_cp_valid),                              //  output,    width = 1,         write_cp.valid
		.write_cp_data          (axi_bridge_1_m0_agent_write_cp_data),                               //  output,  width = 218,                 .data
		.write_cp_startofpacket (axi_bridge_1_m0_agent_write_cp_startofpacket),                      //  output,    width = 1,                 .startofpacket
		.write_cp_endofpacket   (axi_bridge_1_m0_agent_write_cp_endofpacket),                        //  output,    width = 1,                 .endofpacket
		.write_cp_ready         (axi_bridge_1_m0_agent_write_cp_ready),                              //   input,    width = 1,                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                                 //   input,    width = 1,         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                                  //   input,  width = 218,                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                               //   input,    width = 2,                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                         //   input,    width = 1,                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                           //   input,    width = 1,                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                                 //  output,    width = 1,                 .ready
		.read_cp_valid          (axi_bridge_1_m0_agent_read_cp_valid),                               //  output,    width = 1,          read_cp.valid
		.read_cp_data           (axi_bridge_1_m0_agent_read_cp_data),                                //  output,  width = 218,                 .data
		.read_cp_startofpacket  (axi_bridge_1_m0_agent_read_cp_startofpacket),                       //  output,    width = 1,                 .startofpacket
		.read_cp_endofpacket    (axi_bridge_1_m0_agent_read_cp_endofpacket),                         //  output,    width = 1,                 .endofpacket
		.read_cp_ready          (axi_bridge_1_m0_agent_read_cp_ready),                               //   input,    width = 1,                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                             //   input,    width = 1,          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                              //   input,  width = 218,                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                           //   input,    width = 2,                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                                     //   input,    width = 1,                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                                       //   input,    width = 1,                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                             //  output,    width = 1,                 .ready
		.awid                   (axi_bridge_1_m0_translator_m0_awid),                                //   input,    width = 8, altera_axi_slave.awid
		.awaddr                 (axi_bridge_1_m0_translator_m0_awaddr),                              //   input,   width = 64,                 .awaddr
		.awlen                  (axi_bridge_1_m0_translator_m0_awlen),                               //   input,    width = 8,                 .awlen
		.awsize                 (axi_bridge_1_m0_translator_m0_awsize),                              //   input,    width = 3,                 .awsize
		.awburst                (axi_bridge_1_m0_translator_m0_awburst),                             //   input,    width = 2,                 .awburst
		.awlock                 (axi_bridge_1_m0_translator_m0_awlock),                              //   input,    width = 1,                 .awlock
		.awcache                (axi_bridge_1_m0_translator_m0_awcache),                             //   input,    width = 4,                 .awcache
		.awprot                 (axi_bridge_1_m0_translator_m0_awprot),                              //   input,    width = 3,                 .awprot
		.awuser                 (axi_bridge_1_m0_translator_m0_awuser),                              //   input,    width = 1,                 .awuser
		.awqos                  (axi_bridge_1_m0_translator_m0_awqos),                               //   input,    width = 4,                 .awqos
		.awregion               (axi_bridge_1_m0_translator_m0_awregion),                            //   input,    width = 4,                 .awregion
		.awvalid                (axi_bridge_1_m0_translator_m0_awvalid),                             //   input,    width = 1,                 .awvalid
		.awready                (axi_bridge_1_m0_translator_m0_awready),                             //  output,    width = 1,                 .awready
		.wdata                  (axi_bridge_1_m0_translator_m0_wdata),                               //   input,   width = 64,                 .wdata
		.wstrb                  (axi_bridge_1_m0_translator_m0_wstrb),                               //   input,    width = 8,                 .wstrb
		.wlast                  (axi_bridge_1_m0_translator_m0_wlast),                               //   input,    width = 1,                 .wlast
		.wvalid                 (axi_bridge_1_m0_translator_m0_wvalid),                              //   input,    width = 1,                 .wvalid
		.wuser                  (axi_bridge_1_m0_translator_m0_wuser),                               //   input,    width = 1,                 .wuser
		.wready                 (axi_bridge_1_m0_translator_m0_wready),                              //  output,    width = 1,                 .wready
		.bid                    (axi_bridge_1_m0_translator_m0_bid),                                 //  output,    width = 8,                 .bid
		.bresp                  (axi_bridge_1_m0_translator_m0_bresp),                               //  output,    width = 2,                 .bresp
		.buser                  (axi_bridge_1_m0_translator_m0_buser),                               //  output,    width = 1,                 .buser
		.bvalid                 (axi_bridge_1_m0_translator_m0_bvalid),                              //  output,    width = 1,                 .bvalid
		.bready                 (axi_bridge_1_m0_translator_m0_bready),                              //   input,    width = 1,                 .bready
		.arid                   (axi_bridge_1_m0_translator_m0_arid),                                //   input,    width = 8,                 .arid
		.araddr                 (axi_bridge_1_m0_translator_m0_araddr),                              //   input,   width = 64,                 .araddr
		.arlen                  (axi_bridge_1_m0_translator_m0_arlen),                               //   input,    width = 8,                 .arlen
		.arsize                 (axi_bridge_1_m0_translator_m0_arsize),                              //   input,    width = 3,                 .arsize
		.arburst                (axi_bridge_1_m0_translator_m0_arburst),                             //   input,    width = 2,                 .arburst
		.arlock                 (axi_bridge_1_m0_translator_m0_arlock),                              //   input,    width = 1,                 .arlock
		.arcache                (axi_bridge_1_m0_translator_m0_arcache),                             //   input,    width = 4,                 .arcache
		.arprot                 (axi_bridge_1_m0_translator_m0_arprot),                              //   input,    width = 3,                 .arprot
		.aruser                 (axi_bridge_1_m0_translator_m0_aruser),                              //   input,    width = 1,                 .aruser
		.arqos                  (axi_bridge_1_m0_translator_m0_arqos),                               //   input,    width = 4,                 .arqos
		.arregion               (axi_bridge_1_m0_translator_m0_arregion),                            //   input,    width = 4,                 .arregion
		.arvalid                (axi_bridge_1_m0_translator_m0_arvalid),                             //   input,    width = 1,                 .arvalid
		.arready                (axi_bridge_1_m0_translator_m0_arready),                             //  output,    width = 1,                 .arready
		.rid                    (axi_bridge_1_m0_translator_m0_rid),                                 //  output,    width = 8,                 .rid
		.rdata                  (axi_bridge_1_m0_translator_m0_rdata),                               //  output,   width = 64,                 .rdata
		.rresp                  (axi_bridge_1_m0_translator_m0_rresp),                               //  output,    width = 2,                 .rresp
		.rlast                  (axi_bridge_1_m0_translator_m0_rlast),                               //  output,    width = 1,                 .rlast
		.rvalid                 (axi_bridge_1_m0_translator_m0_rvalid),                              //  output,    width = 1,                 .rvalid
		.rready                 (axi_bridge_1_m0_translator_m0_rready),                              //   input,    width = 1,                 .rready
		.ruser                  (axi_bridge_1_m0_translator_m0_ruser),                               //  output,    width = 1,                 .ruser
		.awuser_addrchk         (1'b0),                                                              // (terminated),                                
		.awuser_sai             (1'b0),                                                              // (terminated),                                
		.wuser_datachk          (8'b00000000),                                                       // (terminated),                                
		.wuser_data             (1'b0),                                                              // (terminated),                                
		.wuser_poison           (1'b0),                                                              // (terminated),                                
		.aruser_addrchk         (1'b0),                                                              // (terminated),                                
		.aruser_sai             (1'b0),                                                              // (terminated),                                
		.ruser_datachk          (),                                                                  // (terminated),                                
		.ruser_data             (),                                                                  // (terminated),                                
		.ruser_poison           (),                                                                  // (terminated),                                
		.wid                    (8'b00000000),                                                       // (terminated),                                
		.arsnoop                (4'b0000),                                                           // (terminated),                                
		.ardomain               (2'b00),                                                             // (terminated),                                
		.arbar                  (2'b00),                                                             // (terminated),                                
		.awsnoop                (3'b000),                                                            // (terminated),                                
		.awdomain               (2'b00),                                                             // (terminated),                                
		.awbar                  (2'b00),                                                             // (terminated),                                
		.awunique               (1'b0)                                                               // (terminated),                                
	);

	cva6_intel_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (159),
		.PKT_ORI_BURST_SIZE_L      (157),
		.PKT_RESPONSE_STATUS_H     (156),
		.PKT_RESPONSE_STATUS_L     (155),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_TRANS_LOCK            (104),
		.PKT_BEGIN_BURST           (133),
		.PKT_PROTECTION_H          (150),
		.PKT_PROTECTION_L          (148),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (106),
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_POSTED          (101),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (138),
		.PKT_SRC_ID_L              (138),
		.PKT_DEST_ID_H             (139),
		.PKT_DEST_ID_L             (139),
		.PKT_POISON_H              (169),
		.PKT_POISON_L              (169),
		.PKT_DATACHK_H             (170),
		.PKT_DATACHK_L             (170),
		.PKT_SAI_H                 (174),
		.PKT_SAI_L                 (174),
		.PKT_ADDRCHK_H             (173),
		.PKT_ADDRCHK_L             (172),
		.PKT_USER_DATA_H           (171),
		.PKT_USER_DATA_L           (171),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (182),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset),  //   input,    width = 1,       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                    //  output,   width = 64,              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                       //  output,  width = 182,                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data),          //   input,  width = 182,                .data
		.cp_startofpacket        (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel),       //   input,    width = 2,                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),             //   input,  width = 183,                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),                //  output,  width = 183,                .data
		.rdata_fifo_sink_ready   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                             // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                               
	);

	cva6_intel_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (183),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (emif_fm_0_emif_usr_clk_clk),                                     //   input,    width = 1,       clk.clk
		.reset             (axi_bridge_1_clk_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //   input,  width = 183,        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //   input,    width = 1,          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //  output,    width = 1,          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //   input,    width = 1,          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //   input,    width = 1,          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //  output,  width = 183,       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //  output,    width = 1,          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //   input,    width = 1,          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //  output,    width = 1,          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated),                         
		.csr_read          (1'b0),                                                           // (terminated),                         
		.csr_write         (1'b0),                                                           // (terminated),                         
		.csr_readdata      (),                                                               // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated),                         
		.almost_full_data  (),                                                               // (terminated),                         
		.almost_empty_data (),                                                               // (terminated),                         
		.in_empty          (1'b0),                                                           // (terminated),                         
		.out_empty         (),                                                               // (terminated),                         
		.in_error          (1'b0),                                                           // (terminated),                         
		.out_error         (),                                                               // (terminated),                         
		.in_channel        (1'b0),                                                           // (terminated),                         
		.out_channel       ()                                                                // (terminated),                         
	);

	cva6_intel_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (emif_fm_0_emif_usr_clk_clk),                               //   input,   width = 1,       clk.clk
		.reset             (axi_bridge_1_clk_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //   input,  width = 34,        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //   input,   width = 1,          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //  output,   width = 1,          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //  output,  width = 34,       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //  output,   width = 1,          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                    // (terminated),                        
		.csr_read          (1'b0),                                                     // (terminated),                        
		.csr_write         (1'b0),                                                     // (terminated),                        
		.csr_readdata      (),                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated),                        
		.almost_full_data  (),                                                         // (terminated),                        
		.almost_empty_data (),                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                     // (terminated),                        
		.out_startofpacket (),                                                         // (terminated),                        
		.out_endofpacket   (),                                                         // (terminated),                        
		.in_empty          (1'b0),                                                     // (terminated),                        
		.out_empty         (),                                                         // (terminated),                        
		.in_error          (1'b0),                                                     // (terminated),                        
		.out_error         (),                                                         // (terminated),                        
		.in_channel        (1'b0),                                                     // (terminated),                        
		.out_channel       ()                                                          // (terminated),                        
	);

	cva6_intel_altera_merlin_router_1921_2n3qihq router (
		.sink_ready         (axi_bridge_1_m0_agent_write_cp_ready),                             //  output,    width = 1,      sink.ready
		.sink_valid         (axi_bridge_1_m0_agent_write_cp_valid),                             //   input,    width = 1,          .valid
		.sink_data          (axi_bridge_1_m0_agent_write_cp_data),                              //   input,  width = 218,          .data
		.sink_startofpacket (axi_bridge_1_m0_agent_write_cp_startofpacket),                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_bridge_1_m0_agent_write_cp_endofpacket),                       //   input,    width = 1,          .endofpacket
		.clk                (emif_fm_0_emif_usr_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                 //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                 //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                  //  output,  width = 218,          .data
		.src_channel        (router_src_channel),                                               //  output,    width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_router_1921_2n3qihq router_001 (
		.sink_ready         (axi_bridge_1_m0_agent_read_cp_ready),                              //  output,    width = 1,      sink.ready
		.sink_valid         (axi_bridge_1_m0_agent_read_cp_valid),                              //   input,    width = 1,          .valid
		.sink_data          (axi_bridge_1_m0_agent_read_cp_data),                               //   input,  width = 218,          .data
		.sink_startofpacket (axi_bridge_1_m0_agent_read_cp_startofpacket),                      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (axi_bridge_1_m0_agent_read_cp_endofpacket),                        //   input,    width = 1,          .endofpacket
		.clk                (emif_fm_0_emif_usr_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                              //  output,  width = 218,          .data
		.src_channel        (router_001_src_channel),                                           //  output,    width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_router_1921_mr7yuqy router_002 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                     //  output,    width = 1,      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                     //   input,    width = 1,          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                      //   input,  width = 182,          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),               //   input,    width = 1,          .endofpacket
		.clk                (emif_fm_0_emif_usr_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                             //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                              //  output,  width = 182,          .data
		.src_channel        (router_002_src_channel),                                           //  output,    width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_burst_adapter_1932_yfl5eai #(
		.PKT_ADDR_H                (99),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (133),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (106),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (100),
		.PKT_TRANS_WRITE           (102),
		.PKT_TRANS_READ            (103),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (182),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (108),
		.OUT_BURSTWRAP_H           (125),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) jtag_uart_0_avalon_jtag_slave_burst_adapter (
		.clk                   (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       cr0.clk
		.reset                 (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_valid),         //   input,    width = 1,     sink0.valid
		.sink0_data            (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_data),          //   input,  width = 182,          .data
		.sink0_channel         (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink0_startofpacket   (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink0_ready           (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_ready),         //  output,    width = 1,          .ready
		.source0_valid         (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data),          //  output,  width = 182,          .data
		.source0_channel       (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel),       //  output,    width = 2,          .channel
		.source0_startofpacket (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	cva6_intel_altera_merlin_demultiplexer_1921_cpaekci cmd_demux (
		.clk                (emif_fm_0_emif_usr_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                 //  output,    width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                               //   input,    width = 2,          .channel
		.sink_data          (router_src_data),                                                  //   input,  width = 218,          .data
		.sink_startofpacket (router_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                 //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                              //  output,  width = 218,          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                        //  output,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_demultiplexer_1921_cpaekci cmd_demux_001 (
		.clk                (emif_fm_0_emif_usr_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset              (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                             //  output,    width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                           //   input,    width = 2,          .channel
		.sink_data          (router_001_src_data),                                              //   input,  width = 218,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                             //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                         //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //  output,  width = 218,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //  output,    width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                    //  output,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_multiplexer_1922_745klti cmd_mux (
		.clk                 (emif_fm_0_emif_usr_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset               (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                 //  output,  width = 218,          .data
		.src_channel         (cmd_mux_src_channel),                                              //  output,    width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                             //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                           //   input,    width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                              //   input,  width = 218,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                       //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                         //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                         //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                       //   input,    width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                          //   input,  width = 218,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                    //   input,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_demultiplexer_1921_cujz3fa rsp_demux (
		.clk                (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_ready),         //  output,    width = 1,      sink.ready
		.sink_channel       (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_channel),       //   input,    width = 2,          .channel
		.sink_data          (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_data),          //   input,  width = 218,          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                              //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                              //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                               //  output,  width = 218,          .data
		.src0_channel       (rsp_demux_src0_channel),                                            //  output,    width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                        //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                              //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                              //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                               //  output,  width = 218,          .data
		.src1_channel       (rsp_demux_src1_channel),                                            //  output,    width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                      //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                         //  output,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_multiplexer_1922_senucyq rsp_mux (
		.clk                 (emif_fm_0_emif_usr_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset               (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                 //  output,  width = 218,          .data
		.src_channel         (rsp_mux_src_channel),                                              //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                             //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                           //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                              //   input,  width = 218,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                        //   input,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_multiplexer_1922_senucyq rsp_mux_001 (
		.clk                 (emif_fm_0_emif_usr_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset               (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                            //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                             //  output,  width = 218,          .data
		.src_channel         (rsp_mux_001_src_channel),                                          //  output,    width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                             //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                             //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                           //   input,    width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                                              //   input,  width = 218,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                     //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                        //   input,    width = 1,          .endofpacket
	);

	cva6_intel_altera_merlin_width_adapter_1940_n3kmvxq #(
		.IN_PKT_ADDR_H                 (99),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (106),
		.IN_PKT_TRANS_COMPRESSED_READ  (100),
		.IN_PKT_TRANS_WRITE            (102),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (156),
		.IN_PKT_RESPONSE_STATUS_L      (155),
		.IN_PKT_TRANS_EXCLUSIVE        (105),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (157),
		.IN_PKT_ORI_BURST_SIZE_H       (159),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (182),
		.OUT_PKT_ADDR_H                (135),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (153),
		.OUT_PKT_BYTE_CNT_L            (142),
		.OUT_PKT_TRANS_COMPRESSED_READ (136),
		.OUT_PKT_BURST_SIZE_H          (164),
		.OUT_PKT_BURST_SIZE_L          (162),
		.OUT_PKT_RESPONSE_STATUS_H     (192),
		.OUT_PKT_RESPONSE_STATUS_L     (191),
		.OUT_PKT_TRANS_EXCLUSIVE       (141),
		.OUT_PKT_BURST_TYPE_H          (166),
		.OUT_PKT_BURST_TYPE_L          (165),
		.OUT_PKT_ORI_BURST_SIZE_L      (193),
		.OUT_PKT_ORI_BURST_SIZE_H      (195),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (211),
		.OUT_PKT_SOP_OOO               (212),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (218),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) jtag_uart_0_avalon_jtag_slave_rsp_width_adapter (
		.clk                  (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                              //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                            //   input,    width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                              //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                               //   input,  width = 182,          .data
		.out_endofpacket      (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_data),          //  output,  width = 218,          .data
		.out_channel          (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (jtag_uart_0_avalon_jtag_slave_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated),                         
	);

	cva6_intel_altera_merlin_width_adapter_1940_23tf3cy #(
		.IN_PKT_ADDR_H                 (135),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (153),
		.IN_PKT_BYTE_CNT_L             (142),
		.IN_PKT_TRANS_COMPRESSED_READ  (136),
		.IN_PKT_TRANS_WRITE            (138),
		.IN_PKT_BURSTWRAP_H            (161),
		.IN_PKT_BURSTWRAP_L            (154),
		.IN_PKT_BURST_SIZE_H           (164),
		.IN_PKT_BURST_SIZE_L           (162),
		.IN_PKT_RESPONSE_STATUS_H      (192),
		.IN_PKT_RESPONSE_STATUS_L      (191),
		.IN_PKT_TRANS_EXCLUSIVE        (141),
		.IN_PKT_BURST_TYPE_H           (166),
		.IN_PKT_BURST_TYPE_L           (165),
		.IN_PKT_ORI_BURST_SIZE_L       (193),
		.IN_PKT_ORI_BURST_SIZE_H       (195),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (218),
		.OUT_PKT_ADDR_H                (99),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (106),
		.OUT_PKT_TRANS_COMPRESSED_READ (100),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (156),
		.OUT_PKT_RESPONSE_STATUS_L     (155),
		.OUT_PKT_TRANS_EXCLUSIVE       (105),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (157),
		.OUT_PKT_ORI_BURST_SIZE_H      (159),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (175),
		.OUT_PKT_SOP_OOO               (176),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (182),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) jtag_uart_0_avalon_jtag_slave_cmd_width_adapter (
		.clk                  (emif_fm_0_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (axi_bridge_1_m0_translator_clk_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                               //   input,    width = 2,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                  //   input,  width = 218,          .data
		.out_endofpacket      (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_data),          //  output,  width = 182,          .data
		.out_channel          (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_channel),       //  output,    width = 2,          .channel
		.out_valid            (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (jtag_uart_0_avalon_jtag_slave_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated),                         
	);

endmodule
