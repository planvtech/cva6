// emif_cal_altera_mm_interconnect_1920_pvpm4mq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.1 115

`timescale 1 ps / 1 ps
module emif_cal_altera_mm_interconnect_1920_pvpm4mq (
		input  wire [31:0] jtag_master_master_address,                             //                               jtag_master_master.address
		output wire        jtag_master_master_waitrequest,                         //                                                 .waitrequest
		input  wire [3:0]  jtag_master_master_byteenable,                          //                                                 .byteenable
		input  wire        jtag_master_master_read,                                //                                                 .read
		output wire [31:0] jtag_master_master_readdata,                            //                                                 .readdata
		output wire        jtag_master_master_readdatavalid,                       //                                                 .readdatavalid
		input  wire        jtag_master_master_write,                               //                                                 .write
		input  wire [31:0] jtag_master_master_writedata,                           //                                                 .writedata
		output wire [26:0] emif_cal_cal_debug_address,                             //                               emif_cal_cal_debug.address
		output wire        emif_cal_cal_debug_write,                               //                                                 .write
		output wire        emif_cal_cal_debug_read,                                //                                                 .read
		input  wire [31:0] emif_cal_cal_debug_readdata,                            //                                                 .readdata
		output wire [31:0] emif_cal_cal_debug_writedata,                           //                                                 .writedata
		output wire [3:0]  emif_cal_cal_debug_byteenable,                          //                                                 .byteenable
		input  wire        emif_cal_cal_debug_readdatavalid,                       //                                                 .readdatavalid
		input  wire        emif_cal_cal_debug_waitrequest,                         //                                                 .waitrequest
		input  wire        emif_cal_cal_debug_reset_n_reset_bridge_in_reset_reset, // emif_cal_cal_debug_reset_n_reset_bridge_in_reset.reset,        Reset Input
		input  wire        clk_bridge_out_clk_clk                                  //                               clk_bridge_out_clk.clk,          Clock Input
	);

	wire         jtag_master_master_translator_avalon_universal_master_0_waitrequest;   // emif_cal_cal_debug_translator:uav_waitrequest -> jtag_master_master_translator:uav_waitrequest
	wire  [31:0] jtag_master_master_translator_avalon_universal_master_0_readdata;      // emif_cal_cal_debug_translator:uav_readdata -> jtag_master_master_translator:uav_readdata
	wire         jtag_master_master_translator_avalon_universal_master_0_debugaccess;   // jtag_master_master_translator:uav_debugaccess -> emif_cal_cal_debug_translator:uav_debugaccess
	wire  [31:0] jtag_master_master_translator_avalon_universal_master_0_address;       // jtag_master_master_translator:uav_address -> emif_cal_cal_debug_translator:uav_address
	wire         jtag_master_master_translator_avalon_universal_master_0_read;          // jtag_master_master_translator:uav_read -> emif_cal_cal_debug_translator:uav_read
	wire   [3:0] jtag_master_master_translator_avalon_universal_master_0_byteenable;    // jtag_master_master_translator:uav_byteenable -> emif_cal_cal_debug_translator:uav_byteenable
	wire         jtag_master_master_translator_avalon_universal_master_0_readdatavalid; // emif_cal_cal_debug_translator:uav_readdatavalid -> jtag_master_master_translator:uav_readdatavalid
	wire         jtag_master_master_translator_avalon_universal_master_0_lock;          // jtag_master_master_translator:uav_lock -> emif_cal_cal_debug_translator:uav_lock
	wire         jtag_master_master_translator_avalon_universal_master_0_write;         // jtag_master_master_translator:uav_write -> emif_cal_cal_debug_translator:uav_write
	wire  [31:0] jtag_master_master_translator_avalon_universal_master_0_writedata;     // jtag_master_master_translator:uav_writedata -> emif_cal_cal_debug_translator:uav_writedata
	wire   [2:0] jtag_master_master_translator_avalon_universal_master_0_burstcount;    // jtag_master_master_translator:uav_burstcount -> emif_cal_cal_debug_translator:uav_burstcount

	emif_cal_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) jtag_master_master_translator (
		.clk                    (clk_bridge_out_clk_clk),                                                //   input,   width = 1,                       clk.clk
		.reset                  (emif_cal_cal_debug_reset_n_reset_bridge_in_reset_reset),                //   input,   width = 1,                     reset.reset
		.uav_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (jtag_master_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (jtag_master_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (jtag_master_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (jtag_master_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (jtag_master_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (jtag_master_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (jtag_master_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (jtag_master_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                  // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                  // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                  // (terminated),                                        
		.av_chipselect          (1'b0),                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                  // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                  // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                  // (terminated),                                        
		.uav_clken              (),                                                                      // (terminated),                                        
		.av_clken               (1'b1),                                                                  // (terminated),                                        
		.uav_response           (2'b00),                                                                 // (terminated),                                        
		.av_response            (),                                                                      // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                  // (terminated),                                        
		.av_writeresponsevalid  ()                                                                       // (terminated),                                        
	);

	emif_cal_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) emif_cal_cal_debug_translator (
		.clk                    (clk_bridge_out_clk_clk),                                                //   input,   width = 1,                      clk.clk
		.reset                  (emif_cal_cal_debug_reset_n_reset_bridge_in_reset_reset),                //   input,   width = 1,                    reset.reset
		.uav_address            (jtag_master_master_translator_avalon_universal_master_0_address),       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (jtag_master_master_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (jtag_master_master_translator_avalon_universal_master_0_read),          //   input,   width = 1,                         .read
		.uav_write              (jtag_master_master_translator_avalon_universal_master_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (jtag_master_master_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (jtag_master_master_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (jtag_master_master_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (jtag_master_master_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (jtag_master_master_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (jtag_master_master_translator_avalon_universal_master_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (jtag_master_master_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (emif_cal_cal_debug_address),                                            //  output,  width = 27,      avalon_anti_slave_0.address
		.av_write               (emif_cal_cal_debug_write),                                              //  output,   width = 1,                         .write
		.av_read                (emif_cal_cal_debug_read),                                               //  output,   width = 1,                         .read
		.av_readdata            (emif_cal_cal_debug_readdata),                                           //   input,  width = 32,                         .readdata
		.av_writedata           (emif_cal_cal_debug_writedata),                                          //  output,  width = 32,                         .writedata
		.av_byteenable          (emif_cal_cal_debug_byteenable),                                         //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (emif_cal_cal_debug_readdatavalid),                                      //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (emif_cal_cal_debug_waitrequest),                                        //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                                      // (terminated),                                       
		.av_burstcount          (),                                                                      // (terminated),                                       
		.av_writebyteenable     (),                                                                      // (terminated),                                       
		.av_lock                (),                                                                      // (terminated),                                       
		.av_chipselect          (),                                                                      // (terminated),                                       
		.av_clken               (),                                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                                  // (terminated),                                       
		.av_debugaccess         (),                                                                      // (terminated),                                       
		.av_outputenable        (),                                                                      // (terminated),                                       
		.uav_response           (),                                                                      // (terminated),                                       
		.av_response            (2'b00),                                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                   // (terminated),                                       
	);

endmodule
