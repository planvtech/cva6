// cva6_intel.v

// Generated using ACDS version 24.1 115

`timescale 1 ps / 1 ps
module cva6_intel (
		input  wire        emif_fm_0_local_reset_req_local_reset_req,                   //           emif_fm_0_local_reset_req.local_reset_req
		output wire        emif_fm_0_local_reset_status_local_reset_done,               //        emif_fm_0_local_reset_status.local_reset_done
		input  wire        emif_fm_0_pll_ref_clk_clk,                                   //               emif_fm_0_pll_ref_clk.clk
		output wire        emif_fm_0_pll_locked_pll_locked,                             //                emif_fm_0_pll_locked.pll_locked
		input  wire        emif_fm_0_oct_oct_rzqin,                                     //                       emif_fm_0_oct.oct_rzqin
		output wire [0:0]  emif_fm_0_mem_mem_ck,                                        //                       emif_fm_0_mem.mem_ck
		output wire [0:0]  emif_fm_0_mem_mem_ck_n,                                      //                                    .mem_ck_n
		output wire [16:0] emif_fm_0_mem_mem_a,                                         //                                    .mem_a
		output wire [0:0]  emif_fm_0_mem_mem_act_n,                                     //                                    .mem_act_n
		output wire [1:0]  emif_fm_0_mem_mem_ba,                                        //                                    .mem_ba
		output wire [1:0]  emif_fm_0_mem_mem_bg,                                        //                                    .mem_bg
		output wire [0:0]  emif_fm_0_mem_mem_cke,                                       //                                    .mem_cke
		output wire [0:0]  emif_fm_0_mem_mem_cs_n,                                      //                                    .mem_cs_n
		output wire [0:0]  emif_fm_0_mem_mem_odt,                                       //                                    .mem_odt
		output wire [0:0]  emif_fm_0_mem_mem_reset_n,                                   //                                    .mem_reset_n
		output wire [0:0]  emif_fm_0_mem_mem_par,                                       //                                    .mem_par
		input  wire [0:0]  emif_fm_0_mem_mem_alert_n,                                   //                                    .mem_alert_n
		inout  wire [8:0]  emif_fm_0_mem_mem_dqs,                                       //                                    .mem_dqs
		inout  wire [8:0]  emif_fm_0_mem_mem_dqs_n,                                     //                                    .mem_dqs_n
		inout  wire [71:0] emif_fm_0_mem_mem_dq,                                        //                                    .mem_dq
		inout  wire [8:0]  emif_fm_0_mem_mem_dbi_n,                                     //                                    .mem_dbi_n
		output wire        emif_fm_0_status_local_cal_success,                          //                    emif_fm_0_status.local_cal_success
		output wire        emif_fm_0_status_local_cal_fail,                             //                                    .local_cal_fail
		output wire        emif_fm_0_emif_usr_reset_n_reset_n,                          //          emif_fm_0_emif_usr_reset_n.reset_n
		output wire        emif_fm_0_emif_usr_clk_clk,                                  //              emif_fm_0_emif_usr_clk.clk
		output wire        emif_fm_0_ctrl_ecc_user_interrupt_0_ctrl_ecc_user_interrupt, // emif_fm_0_ctrl_ecc_user_interrupt_0.ctrl_ecc_user_interrupt
		input  wire        iopll_0_refclk_clk,                                          //                      iopll_0_refclk.clk
		input  wire        reset_controller_0_reset_in0_reset                           //        reset_controller_0_reset_in0.reset
	);

	wire           emif_cal_0_emif_calbus_clk_clk;                       // emif_cal_0:calbus_clk -> emif_fm_0:calbus_clk
	wire           iopll_0_outclk0_clk;                                  // iopll_0:outclk_0 -> [axi_bridge_0:aclk, mm_interconnect_0:iopll_0_outclk0_clk, reset_controller_0:clk, rst_controller:clk]
	wire    [31:0] emif_cal_0_emif_calbus_0_calbus_wdata;                // emif_cal_0:calbus_wdata_0 -> emif_fm_0:calbus_wdata
	wire    [19:0] emif_cal_0_emif_calbus_0_calbus_address;              // emif_cal_0:calbus_address_0 -> emif_fm_0:calbus_address
	wire  [4095:0] emif_fm_0_emif_calbus_calbus_seq_param_tbl;           // emif_fm_0:calbus_seq_param_tbl -> emif_cal_0:calbus_seq_param_tbl_0
	wire           emif_cal_0_emif_calbus_0_calbus_read;                 // emif_cal_0:calbus_read_0 -> emif_fm_0:calbus_read
	wire           emif_cal_0_emif_calbus_0_calbus_write;                // emif_cal_0:calbus_write_0 -> emif_fm_0:calbus_write
	wire    [31:0] emif_fm_0_emif_calbus_calbus_rdata;                   // emif_fm_0:calbus_rdata -> emif_cal_0:calbus_rdata_0
	wire           reset_controller_0_reset_out_reset;                   // reset_controller_0:reset_out -> [axi_bridge_0:aresetn, iopll_0:rst, rst_controller:reset_in0]
	wire     [1:0] axi_bridge_0_m0_awburst;                              // axi_bridge_0:m0_awburst -> mm_interconnect_0:axi_bridge_0_m0_awburst
	wire     [7:0] axi_bridge_0_m0_arlen;                                // axi_bridge_0:m0_arlen -> mm_interconnect_0:axi_bridge_0_m0_arlen
	wire     [7:0] axi_bridge_0_m0_wstrb;                                // axi_bridge_0:m0_wstrb -> mm_interconnect_0:axi_bridge_0_m0_wstrb
	wire           axi_bridge_0_m0_wready;                               // mm_interconnect_0:axi_bridge_0_m0_wready -> axi_bridge_0:m0_wready
	wire     [7:0] axi_bridge_0_m0_rid;                                  // mm_interconnect_0:axi_bridge_0_m0_rid -> axi_bridge_0:m0_rid
	wire           axi_bridge_0_m0_rready;                               // axi_bridge_0:m0_rready -> mm_interconnect_0:axi_bridge_0_m0_rready
	wire     [7:0] axi_bridge_0_m0_awlen;                                // axi_bridge_0:m0_awlen -> mm_interconnect_0:axi_bridge_0_m0_awlen
	wire     [3:0] axi_bridge_0_m0_arcache;                              // axi_bridge_0:m0_arcache -> mm_interconnect_0:axi_bridge_0_m0_arcache
	wire           axi_bridge_0_m0_wvalid;                               // axi_bridge_0:m0_wvalid -> mm_interconnect_0:axi_bridge_0_m0_wvalid
	wire    [63:0] axi_bridge_0_m0_araddr;                               // axi_bridge_0:m0_araddr -> mm_interconnect_0:axi_bridge_0_m0_araddr
	wire     [2:0] axi_bridge_0_m0_arprot;                               // axi_bridge_0:m0_arprot -> mm_interconnect_0:axi_bridge_0_m0_arprot
	wire     [2:0] axi_bridge_0_m0_awprot;                               // axi_bridge_0:m0_awprot -> mm_interconnect_0:axi_bridge_0_m0_awprot
	wire    [63:0] axi_bridge_0_m0_wdata;                                // axi_bridge_0:m0_wdata -> mm_interconnect_0:axi_bridge_0_m0_wdata
	wire           axi_bridge_0_m0_arvalid;                              // axi_bridge_0:m0_arvalid -> mm_interconnect_0:axi_bridge_0_m0_arvalid
	wire     [3:0] axi_bridge_0_m0_awcache;                              // axi_bridge_0:m0_awcache -> mm_interconnect_0:axi_bridge_0_m0_awcache
	wire     [7:0] axi_bridge_0_m0_arid;                                 // axi_bridge_0:m0_arid -> mm_interconnect_0:axi_bridge_0_m0_arid
	wire     [0:0] axi_bridge_0_m0_arlock;                               // axi_bridge_0:m0_arlock -> mm_interconnect_0:axi_bridge_0_m0_arlock
	wire     [0:0] axi_bridge_0_m0_awlock;                               // axi_bridge_0:m0_awlock -> mm_interconnect_0:axi_bridge_0_m0_awlock
	wire    [63:0] axi_bridge_0_m0_awaddr;                               // axi_bridge_0:m0_awaddr -> mm_interconnect_0:axi_bridge_0_m0_awaddr
	wire     [1:0] axi_bridge_0_m0_bresp;                                // mm_interconnect_0:axi_bridge_0_m0_bresp -> axi_bridge_0:m0_bresp
	wire           axi_bridge_0_m0_arready;                              // mm_interconnect_0:axi_bridge_0_m0_arready -> axi_bridge_0:m0_arready
	wire    [63:0] axi_bridge_0_m0_rdata;                                // mm_interconnect_0:axi_bridge_0_m0_rdata -> axi_bridge_0:m0_rdata
	wire           axi_bridge_0_m0_awready;                              // mm_interconnect_0:axi_bridge_0_m0_awready -> axi_bridge_0:m0_awready
	wire     [1:0] axi_bridge_0_m0_arburst;                              // axi_bridge_0:m0_arburst -> mm_interconnect_0:axi_bridge_0_m0_arburst
	wire     [2:0] axi_bridge_0_m0_arsize;                               // axi_bridge_0:m0_arsize -> mm_interconnect_0:axi_bridge_0_m0_arsize
	wire           axi_bridge_0_m0_bready;                               // axi_bridge_0:m0_bready -> mm_interconnect_0:axi_bridge_0_m0_bready
	wire           axi_bridge_0_m0_rlast;                                // mm_interconnect_0:axi_bridge_0_m0_rlast -> axi_bridge_0:m0_rlast
	wire           axi_bridge_0_m0_wlast;                                // axi_bridge_0:m0_wlast -> mm_interconnect_0:axi_bridge_0_m0_wlast
	wire     [1:0] axi_bridge_0_m0_rresp;                                // mm_interconnect_0:axi_bridge_0_m0_rresp -> axi_bridge_0:m0_rresp
	wire     [7:0] axi_bridge_0_m0_awid;                                 // axi_bridge_0:m0_awid -> mm_interconnect_0:axi_bridge_0_m0_awid
	wire     [7:0] axi_bridge_0_m0_bid;                                  // mm_interconnect_0:axi_bridge_0_m0_bid -> axi_bridge_0:m0_bid
	wire           axi_bridge_0_m0_bvalid;                               // mm_interconnect_0:axi_bridge_0_m0_bvalid -> axi_bridge_0:m0_bvalid
	wire     [2:0] axi_bridge_0_m0_awsize;                               // axi_bridge_0:m0_awsize -> mm_interconnect_0:axi_bridge_0_m0_awsize
	wire           axi_bridge_0_m0_awvalid;                              // axi_bridge_0:m0_awvalid -> mm_interconnect_0:axi_bridge_0_m0_awvalid
	wire           axi_bridge_0_m0_rvalid;                               // mm_interconnect_0:axi_bridge_0_m0_rvalid -> axi_bridge_0:m0_rvalid
	wire   [511:0] mm_interconnect_0_emif_fm_0_ctrl_amm_0_readdata;      // emif_fm_0:amm_readdata_0 -> mm_interconnect_0:emif_fm_0_ctrl_amm_0_readdata
	wire           mm_interconnect_0_emif_fm_0_ctrl_amm_0_waitrequest;   // emif_fm_0:amm_ready_0 -> mm_interconnect_0:emif_fm_0_ctrl_amm_0_waitrequest
	wire    [26:0] mm_interconnect_0_emif_fm_0_ctrl_amm_0_address;       // mm_interconnect_0:emif_fm_0_ctrl_amm_0_address -> emif_fm_0:amm_address_0
	wire           mm_interconnect_0_emif_fm_0_ctrl_amm_0_read;          // mm_interconnect_0:emif_fm_0_ctrl_amm_0_read -> emif_fm_0:amm_read_0
	wire    [63:0] mm_interconnect_0_emif_fm_0_ctrl_amm_0_byteenable;    // mm_interconnect_0:emif_fm_0_ctrl_amm_0_byteenable -> emif_fm_0:amm_byteenable_0
	wire           mm_interconnect_0_emif_fm_0_ctrl_amm_0_readdatavalid; // emif_fm_0:amm_readdatavalid_0 -> mm_interconnect_0:emif_fm_0_ctrl_amm_0_readdatavalid
	wire           mm_interconnect_0_emif_fm_0_ctrl_amm_0_write;         // mm_interconnect_0:emif_fm_0_ctrl_amm_0_write -> emif_fm_0:amm_write_0
	wire   [511:0] mm_interconnect_0_emif_fm_0_ctrl_amm_0_writedata;     // mm_interconnect_0:emif_fm_0_ctrl_amm_0_writedata -> emif_fm_0:amm_writedata_0
	wire     [6:0] mm_interconnect_0_emif_fm_0_ctrl_amm_0_burstcount;    // mm_interconnect_0:emif_fm_0_ctrl_amm_0_burstcount -> emif_fm_0:amm_burstcount_0
	wire           rst_controller_reset_out_reset;                       // rst_controller:reset_out -> [mm_interconnect_0:axi_bridge_0_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_0:axi_bridge_0_m0_translator_clk_reset_reset_bridge_in_reset_reset]
	wire           rst_controller_001_reset_out_reset;                   // rst_controller_001:reset_out -> [mm_interconnect_0:emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset, mm_interconnect_0:emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset]

	cva6_intel_axi_bridge_0 axi_bridge_0 (
		.aclk       (iopll_0_outclk0_clk),                 //   input,   width = 1,       clk.clk
		.aresetn    (~reset_controller_0_reset_out_reset), //   input,   width = 1, clk_reset.reset_n
		.s0_awid    (),                                    //   input,   width = 8,        s0.awid
		.s0_awaddr  (),                                    //   input,  width = 64,          .awaddr
		.s0_awlen   (),                                    //   input,   width = 8,          .awlen
		.s0_awsize  (),                                    //   input,   width = 3,          .awsize
		.s0_awburst (),                                    //   input,   width = 2,          .awburst
		.s0_awlock  (),                                    //   input,   width = 1,          .awlock
		.s0_awcache (),                                    //   input,   width = 4,          .awcache
		.s0_awprot  (),                                    //   input,   width = 3,          .awprot
		.s0_awvalid (),                                    //   input,   width = 1,          .awvalid
		.s0_awready (),                                    //  output,   width = 1,          .awready
		.s0_wdata   (),                                    //   input,  width = 64,          .wdata
		.s0_wstrb   (),                                    //   input,   width = 8,          .wstrb
		.s0_wlast   (),                                    //   input,   width = 1,          .wlast
		.s0_wvalid  (),                                    //   input,   width = 1,          .wvalid
		.s0_wready  (),                                    //  output,   width = 1,          .wready
		.s0_bid     (),                                    //  output,   width = 8,          .bid
		.s0_bresp   (),                                    //  output,   width = 2,          .bresp
		.s0_bvalid  (),                                    //  output,   width = 1,          .bvalid
		.s0_bready  (),                                    //   input,   width = 1,          .bready
		.s0_arid    (),                                    //   input,   width = 8,          .arid
		.s0_araddr  (),                                    //   input,  width = 64,          .araddr
		.s0_arlen   (),                                    //   input,   width = 8,          .arlen
		.s0_arsize  (),                                    //   input,   width = 3,          .arsize
		.s0_arburst (),                                    //   input,   width = 2,          .arburst
		.s0_arlock  (),                                    //   input,   width = 1,          .arlock
		.s0_arcache (),                                    //   input,   width = 4,          .arcache
		.s0_arprot  (),                                    //   input,   width = 3,          .arprot
		.s0_arvalid (),                                    //   input,   width = 1,          .arvalid
		.s0_arready (),                                    //  output,   width = 1,          .arready
		.s0_rid     (),                                    //  output,   width = 8,          .rid
		.s0_rdata   (),                                    //  output,  width = 64,          .rdata
		.s0_rresp   (),                                    //  output,   width = 2,          .rresp
		.s0_rlast   (),                                    //  output,   width = 1,          .rlast
		.s0_rvalid  (),                                    //  output,   width = 1,          .rvalid
		.s0_rready  (),                                    //   input,   width = 1,          .rready
		.m0_awid    (axi_bridge_0_m0_awid),                //  output,   width = 8,        m0.awid
		.m0_awaddr  (axi_bridge_0_m0_awaddr),              //  output,  width = 64,          .awaddr
		.m0_awlen   (axi_bridge_0_m0_awlen),               //  output,   width = 8,          .awlen
		.m0_awsize  (axi_bridge_0_m0_awsize),              //  output,   width = 3,          .awsize
		.m0_awburst (axi_bridge_0_m0_awburst),             //  output,   width = 2,          .awburst
		.m0_awlock  (axi_bridge_0_m0_awlock),              //  output,   width = 1,          .awlock
		.m0_awcache (axi_bridge_0_m0_awcache),             //  output,   width = 4,          .awcache
		.m0_awprot  (axi_bridge_0_m0_awprot),              //  output,   width = 3,          .awprot
		.m0_awvalid (axi_bridge_0_m0_awvalid),             //  output,   width = 1,          .awvalid
		.m0_awready (axi_bridge_0_m0_awready),             //   input,   width = 1,          .awready
		.m0_wdata   (axi_bridge_0_m0_wdata),               //  output,  width = 64,          .wdata
		.m0_wstrb   (axi_bridge_0_m0_wstrb),               //  output,   width = 8,          .wstrb
		.m0_wlast   (axi_bridge_0_m0_wlast),               //  output,   width = 1,          .wlast
		.m0_wvalid  (axi_bridge_0_m0_wvalid),              //  output,   width = 1,          .wvalid
		.m0_wready  (axi_bridge_0_m0_wready),              //   input,   width = 1,          .wready
		.m0_bid     (axi_bridge_0_m0_bid),                 //   input,   width = 8,          .bid
		.m0_bresp   (axi_bridge_0_m0_bresp),               //   input,   width = 2,          .bresp
		.m0_bvalid  (axi_bridge_0_m0_bvalid),              //   input,   width = 1,          .bvalid
		.m0_bready  (axi_bridge_0_m0_bready),              //  output,   width = 1,          .bready
		.m0_arid    (axi_bridge_0_m0_arid),                //  output,   width = 8,          .arid
		.m0_araddr  (axi_bridge_0_m0_araddr),              //  output,  width = 64,          .araddr
		.m0_arlen   (axi_bridge_0_m0_arlen),               //  output,   width = 8,          .arlen
		.m0_arsize  (axi_bridge_0_m0_arsize),              //  output,   width = 3,          .arsize
		.m0_arburst (axi_bridge_0_m0_arburst),             //  output,   width = 2,          .arburst
		.m0_arlock  (axi_bridge_0_m0_arlock),              //  output,   width = 1,          .arlock
		.m0_arcache (axi_bridge_0_m0_arcache),             //  output,   width = 4,          .arcache
		.m0_arprot  (axi_bridge_0_m0_arprot),              //  output,   width = 3,          .arprot
		.m0_arvalid (axi_bridge_0_m0_arvalid),             //  output,   width = 1,          .arvalid
		.m0_arready (axi_bridge_0_m0_arready),             //   input,   width = 1,          .arready
		.m0_rid     (axi_bridge_0_m0_rid),                 //   input,   width = 8,          .rid
		.m0_rdata   (axi_bridge_0_m0_rdata),               //   input,  width = 64,          .rdata
		.m0_rresp   (axi_bridge_0_m0_rresp),               //   input,   width = 2,          .rresp
		.m0_rlast   (axi_bridge_0_m0_rlast),               //   input,   width = 1,          .rlast
		.m0_rvalid  (axi_bridge_0_m0_rvalid),              //   input,   width = 1,          .rvalid
		.m0_rready  (axi_bridge_0_m0_rready)               //  output,   width = 1,          .rready
	);

	emif_cal emif_cal_0 (
		.calbus_read_0          (emif_cal_0_emif_calbus_0_calbus_read),       //  output,     width = 1,   emif_calbus_0.calbus_read
		.calbus_write_0         (emif_cal_0_emif_calbus_0_calbus_write),      //  output,     width = 1,                .calbus_write
		.calbus_address_0       (emif_cal_0_emif_calbus_0_calbus_address),    //  output,    width = 20,                .calbus_address
		.calbus_wdata_0         (emif_cal_0_emif_calbus_0_calbus_wdata),      //  output,    width = 32,                .calbus_wdata
		.calbus_rdata_0         (emif_fm_0_emif_calbus_calbus_rdata),         //   input,    width = 32,                .calbus_rdata
		.calbus_seq_param_tbl_0 (emif_fm_0_emif_calbus_calbus_seq_param_tbl), //   input,  width = 4096,                .calbus_seq_param_tbl
		.calbus_clk             (emif_cal_0_emif_calbus_clk_clk)              //  output,     width = 1, emif_calbus_clk.clk
	);

	ed_synth_emif_fm_0 emif_fm_0 (
		.local_reset_req           (emif_fm_0_local_reset_req_local_reset_req),                   //   input,     width = 1,           local_reset_req.local_reset_req
		.local_reset_done          (emif_fm_0_local_reset_status_local_reset_done),               //  output,     width = 1,        local_reset_status.local_reset_done
		.pll_ref_clk               (emif_fm_0_pll_ref_clk_clk),                                   //   input,     width = 1,               pll_ref_clk.clk
		.pll_locked                (emif_fm_0_pll_locked_pll_locked),                             //  output,     width = 1,                pll_locked.pll_locked
		.oct_rzqin                 (emif_fm_0_oct_oct_rzqin),                                     //   input,     width = 1,                       oct.oct_rzqin
		.mem_ck                    (emif_fm_0_mem_mem_ck),                                        //  output,     width = 1,                       mem.mem_ck
		.mem_ck_n                  (emif_fm_0_mem_mem_ck_n),                                      //  output,     width = 1,                          .mem_ck_n
		.mem_a                     (emif_fm_0_mem_mem_a),                                         //  output,    width = 17,                          .mem_a
		.mem_act_n                 (emif_fm_0_mem_mem_act_n),                                     //  output,     width = 1,                          .mem_act_n
		.mem_ba                    (emif_fm_0_mem_mem_ba),                                        //  output,     width = 2,                          .mem_ba
		.mem_bg                    (emif_fm_0_mem_mem_bg),                                        //  output,     width = 2,                          .mem_bg
		.mem_cke                   (emif_fm_0_mem_mem_cke),                                       //  output,     width = 1,                          .mem_cke
		.mem_cs_n                  (emif_fm_0_mem_mem_cs_n),                                      //  output,     width = 1,                          .mem_cs_n
		.mem_odt                   (emif_fm_0_mem_mem_odt),                                       //  output,     width = 1,                          .mem_odt
		.mem_reset_n               (emif_fm_0_mem_mem_reset_n),                                   //  output,     width = 1,                          .mem_reset_n
		.mem_par                   (emif_fm_0_mem_mem_par),                                       //  output,     width = 1,                          .mem_par
		.mem_alert_n               (emif_fm_0_mem_mem_alert_n),                                   //   input,     width = 1,                          .mem_alert_n
		.mem_dqs                   (emif_fm_0_mem_mem_dqs),                                       //   inout,     width = 9,                          .mem_dqs
		.mem_dqs_n                 (emif_fm_0_mem_mem_dqs_n),                                     //   inout,     width = 9,                          .mem_dqs_n
		.mem_dq                    (emif_fm_0_mem_mem_dq),                                        //   inout,    width = 72,                          .mem_dq
		.mem_dbi_n                 (emif_fm_0_mem_mem_dbi_n),                                     //   inout,     width = 9,                          .mem_dbi_n
		.local_cal_success         (emif_fm_0_status_local_cal_success),                          //  output,     width = 1,                    status.local_cal_success
		.local_cal_fail            (emif_fm_0_status_local_cal_fail),                             //  output,     width = 1,                          .local_cal_fail
		.calbus_read               (emif_cal_0_emif_calbus_0_calbus_read),                        //   input,     width = 1,               emif_calbus.calbus_read
		.calbus_write              (emif_cal_0_emif_calbus_0_calbus_write),                       //   input,     width = 1,                          .calbus_write
		.calbus_address            (emif_cal_0_emif_calbus_0_calbus_address),                     //   input,    width = 20,                          .calbus_address
		.calbus_wdata              (emif_cal_0_emif_calbus_0_calbus_wdata),                       //   input,    width = 32,                          .calbus_wdata
		.calbus_rdata              (emif_fm_0_emif_calbus_calbus_rdata),                          //  output,    width = 32,                          .calbus_rdata
		.calbus_seq_param_tbl      (emif_fm_0_emif_calbus_calbus_seq_param_tbl),                  //  output,  width = 4096,                          .calbus_seq_param_tbl
		.calbus_clk                (emif_cal_0_emif_calbus_clk_clk),                              //   input,     width = 1,           emif_calbus_clk.clk
		.emif_usr_reset_n          (emif_fm_0_emif_usr_reset_n_reset_n),                          //  output,     width = 1,          emif_usr_reset_n.reset_n
		.emif_usr_clk              (emif_fm_0_emif_usr_clk_clk),                                  //  output,     width = 1,              emif_usr_clk.clk
		.ctrl_ecc_user_interrupt_0 (emif_fm_0_ctrl_ecc_user_interrupt_0_ctrl_ecc_user_interrupt), //  output,     width = 1, ctrl_ecc_user_interrupt_0.ctrl_ecc_user_interrupt
		.amm_ready_0               (mm_interconnect_0_emif_fm_0_ctrl_amm_0_waitrequest),          //  output,     width = 1,                ctrl_amm_0.waitrequest_n
		.amm_read_0                (mm_interconnect_0_emif_fm_0_ctrl_amm_0_read),                 //   input,     width = 1,                          .read
		.amm_write_0               (mm_interconnect_0_emif_fm_0_ctrl_amm_0_write),                //   input,     width = 1,                          .write
		.amm_address_0             (mm_interconnect_0_emif_fm_0_ctrl_amm_0_address),              //   input,    width = 27,                          .address
		.amm_readdata_0            (mm_interconnect_0_emif_fm_0_ctrl_amm_0_readdata),             //  output,   width = 512,                          .readdata
		.amm_writedata_0           (mm_interconnect_0_emif_fm_0_ctrl_amm_0_writedata),            //   input,   width = 512,                          .writedata
		.amm_burstcount_0          (mm_interconnect_0_emif_fm_0_ctrl_amm_0_burstcount),           //   input,     width = 7,                          .burstcount
		.amm_byteenable_0          (mm_interconnect_0_emif_fm_0_ctrl_amm_0_byteenable),           //   input,    width = 64,                          .byteenable
		.amm_readdatavalid_0       (mm_interconnect_0_emif_fm_0_ctrl_amm_0_readdatavalid)         //  output,     width = 1,                          .readdatavalid
	);

	io_pll iopll_0 (
		.refclk   (iopll_0_refclk_clk),                 //   input,  width = 1,  refclk.clk
		.locked   (),                                   //  output,  width = 1,  locked.export
		.rst      (reset_controller_0_reset_out_reset), //   input,  width = 1,   reset.reset
		.outclk_0 (iopll_0_outclk0_clk),                //  output,  width = 1, outclk0.clk
		.outclk_1 (),                                   //  output,  width = 1, outclk1.clk
		.outclk_2 (),                                   //  output,  width = 1, outclk2.clk
		.outclk_3 (),                                   //  output,  width = 1, outclk3.clk
		.outclk_4 ()                                    //  output,  width = 1, outclk4.clk
	);

	cva6_intel_reset_controller_0 reset_controller_0 (
		.reset_in0 (reset_controller_0_reset_in0_reset), //   input,  width = 1, reset_in0.reset
		.clk       (iopll_0_outclk0_clk),                //   input,  width = 1,       clk.clk
		.reset_out (reset_controller_0_reset_out_reset)  //  output,  width = 1, reset_out.reset
	);

	cva6_intel_altera_mm_interconnect_1920_7uifsqq mm_interconnect_0 (
		.axi_bridge_0_m0_awid                                                      (axi_bridge_0_m0_awid),                                 //   input,    width = 8,                                                     axi_bridge_0_m0.awid
		.axi_bridge_0_m0_awaddr                                                    (axi_bridge_0_m0_awaddr),                               //   input,   width = 64,                                                                    .awaddr
		.axi_bridge_0_m0_awlen                                                     (axi_bridge_0_m0_awlen),                                //   input,    width = 8,                                                                    .awlen
		.axi_bridge_0_m0_awsize                                                    (axi_bridge_0_m0_awsize),                               //   input,    width = 3,                                                                    .awsize
		.axi_bridge_0_m0_awburst                                                   (axi_bridge_0_m0_awburst),                              //   input,    width = 2,                                                                    .awburst
		.axi_bridge_0_m0_awlock                                                    (axi_bridge_0_m0_awlock),                               //   input,    width = 1,                                                                    .awlock
		.axi_bridge_0_m0_awcache                                                   (axi_bridge_0_m0_awcache),                              //   input,    width = 4,                                                                    .awcache
		.axi_bridge_0_m0_awprot                                                    (axi_bridge_0_m0_awprot),                               //   input,    width = 3,                                                                    .awprot
		.axi_bridge_0_m0_awvalid                                                   (axi_bridge_0_m0_awvalid),                              //   input,    width = 1,                                                                    .awvalid
		.axi_bridge_0_m0_awready                                                   (axi_bridge_0_m0_awready),                              //  output,    width = 1,                                                                    .awready
		.axi_bridge_0_m0_wdata                                                     (axi_bridge_0_m0_wdata),                                //   input,   width = 64,                                                                    .wdata
		.axi_bridge_0_m0_wstrb                                                     (axi_bridge_0_m0_wstrb),                                //   input,    width = 8,                                                                    .wstrb
		.axi_bridge_0_m0_wlast                                                     (axi_bridge_0_m0_wlast),                                //   input,    width = 1,                                                                    .wlast
		.axi_bridge_0_m0_wvalid                                                    (axi_bridge_0_m0_wvalid),                               //   input,    width = 1,                                                                    .wvalid
		.axi_bridge_0_m0_wready                                                    (axi_bridge_0_m0_wready),                               //  output,    width = 1,                                                                    .wready
		.axi_bridge_0_m0_bid                                                       (axi_bridge_0_m0_bid),                                  //  output,    width = 8,                                                                    .bid
		.axi_bridge_0_m0_bresp                                                     (axi_bridge_0_m0_bresp),                                //  output,    width = 2,                                                                    .bresp
		.axi_bridge_0_m0_bvalid                                                    (axi_bridge_0_m0_bvalid),                               //  output,    width = 1,                                                                    .bvalid
		.axi_bridge_0_m0_bready                                                    (axi_bridge_0_m0_bready),                               //   input,    width = 1,                                                                    .bready
		.axi_bridge_0_m0_arid                                                      (axi_bridge_0_m0_arid),                                 //   input,    width = 8,                                                                    .arid
		.axi_bridge_0_m0_araddr                                                    (axi_bridge_0_m0_araddr),                               //   input,   width = 64,                                                                    .araddr
		.axi_bridge_0_m0_arlen                                                     (axi_bridge_0_m0_arlen),                                //   input,    width = 8,                                                                    .arlen
		.axi_bridge_0_m0_arsize                                                    (axi_bridge_0_m0_arsize),                               //   input,    width = 3,                                                                    .arsize
		.axi_bridge_0_m0_arburst                                                   (axi_bridge_0_m0_arburst),                              //   input,    width = 2,                                                                    .arburst
		.axi_bridge_0_m0_arlock                                                    (axi_bridge_0_m0_arlock),                               //   input,    width = 1,                                                                    .arlock
		.axi_bridge_0_m0_arcache                                                   (axi_bridge_0_m0_arcache),                              //   input,    width = 4,                                                                    .arcache
		.axi_bridge_0_m0_arprot                                                    (axi_bridge_0_m0_arprot),                               //   input,    width = 3,                                                                    .arprot
		.axi_bridge_0_m0_arvalid                                                   (axi_bridge_0_m0_arvalid),                              //   input,    width = 1,                                                                    .arvalid
		.axi_bridge_0_m0_arready                                                   (axi_bridge_0_m0_arready),                              //  output,    width = 1,                                                                    .arready
		.axi_bridge_0_m0_rid                                                       (axi_bridge_0_m0_rid),                                  //  output,    width = 8,                                                                    .rid
		.axi_bridge_0_m0_rdata                                                     (axi_bridge_0_m0_rdata),                                //  output,   width = 64,                                                                    .rdata
		.axi_bridge_0_m0_rresp                                                     (axi_bridge_0_m0_rresp),                                //  output,    width = 2,                                                                    .rresp
		.axi_bridge_0_m0_rlast                                                     (axi_bridge_0_m0_rlast),                                //  output,    width = 1,                                                                    .rlast
		.axi_bridge_0_m0_rvalid                                                    (axi_bridge_0_m0_rvalid),                               //  output,    width = 1,                                                                    .rvalid
		.axi_bridge_0_m0_rready                                                    (axi_bridge_0_m0_rready),                               //   input,    width = 1,                                                                    .rready
		.emif_fm_0_ctrl_amm_0_address                                              (mm_interconnect_0_emif_fm_0_ctrl_amm_0_address),       //  output,   width = 27,                                                emif_fm_0_ctrl_amm_0.address
		.emif_fm_0_ctrl_amm_0_write                                                (mm_interconnect_0_emif_fm_0_ctrl_amm_0_write),         //  output,    width = 1,                                                                    .write
		.emif_fm_0_ctrl_amm_0_read                                                 (mm_interconnect_0_emif_fm_0_ctrl_amm_0_read),          //  output,    width = 1,                                                                    .read
		.emif_fm_0_ctrl_amm_0_readdata                                             (mm_interconnect_0_emif_fm_0_ctrl_amm_0_readdata),      //   input,  width = 512,                                                                    .readdata
		.emif_fm_0_ctrl_amm_0_writedata                                            (mm_interconnect_0_emif_fm_0_ctrl_amm_0_writedata),     //  output,  width = 512,                                                                    .writedata
		.emif_fm_0_ctrl_amm_0_burstcount                                           (mm_interconnect_0_emif_fm_0_ctrl_amm_0_burstcount),    //  output,    width = 7,                                                                    .burstcount
		.emif_fm_0_ctrl_amm_0_byteenable                                           (mm_interconnect_0_emif_fm_0_ctrl_amm_0_byteenable),    //  output,   width = 64,                                                                    .byteenable
		.emif_fm_0_ctrl_amm_0_readdatavalid                                        (mm_interconnect_0_emif_fm_0_ctrl_amm_0_readdatavalid), //   input,    width = 1,                                                                    .readdatavalid
		.emif_fm_0_ctrl_amm_0_waitrequest                                          (~mm_interconnect_0_emif_fm_0_ctrl_amm_0_waitrequest),  //   input,    width = 1,                                                                    .waitrequest
		.axi_bridge_0_clk_reset_reset_bridge_in_reset_reset                        (rst_controller_reset_out_reset),                       //   input,    width = 1,                        axi_bridge_0_clk_reset_reset_bridge_in_reset.reset
		.axi_bridge_0_m0_translator_clk_reset_reset_bridge_in_reset_reset          (rst_controller_reset_out_reset),                       //   input,    width = 1,          axi_bridge_0_m0_translator_clk_reset_reset_bridge_in_reset.reset
		.emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset         (rst_controller_001_reset_out_reset),                   //   input,    width = 1,         emif_fm_0_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		.emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                   //   input,    width = 1, emif_fm_0_ctrl_amm_0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset
		.iopll_0_outclk0_clk                                                       (iopll_0_outclk0_clk),                                  //   input,    width = 1,                                                     iopll_0_outclk0.clk
		.emif_fm_0_emif_usr_clk_clk                                                (emif_fm_0_emif_usr_clk_clk)                            //   input,    width = 1,                                              emif_fm_0_emif_usr_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (reset_controller_0_reset_out_reset), //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk0_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~emif_fm_0_emif_usr_reset_n_reset_n), //   input,  width = 1, reset_in0.reset
		.clk            (emif_fm_0_emif_usr_clk_clk),          //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),  //  output,  width = 1, reset_out.reset
		.reset_req      (),                                    // (terminated),                       
		.reset_req_in0  (1'b0),                                // (terminated),                       
		.reset_in1      (1'b0),                                // (terminated),                       
		.reset_req_in1  (1'b0),                                // (terminated),                       
		.reset_in2      (1'b0),                                // (terminated),                       
		.reset_req_in2  (1'b0),                                // (terminated),                       
		.reset_in3      (1'b0),                                // (terminated),                       
		.reset_req_in3  (1'b0),                                // (terminated),                       
		.reset_in4      (1'b0),                                // (terminated),                       
		.reset_req_in4  (1'b0),                                // (terminated),                       
		.reset_in5      (1'b0),                                // (terminated),                       
		.reset_req_in5  (1'b0),                                // (terminated),                       
		.reset_in6      (1'b0),                                // (terminated),                       
		.reset_req_in6  (1'b0),                                // (terminated),                       
		.reset_in7      (1'b0),                                // (terminated),                       
		.reset_req_in7  (1'b0),                                // (terminated),                       
		.reset_in8      (1'b0),                                // (terminated),                       
		.reset_req_in8  (1'b0),                                // (terminated),                       
		.reset_in9      (1'b0),                                // (terminated),                       
		.reset_req_in9  (1'b0),                                // (terminated),                       
		.reset_in10     (1'b0),                                // (terminated),                       
		.reset_req_in10 (1'b0),                                // (terminated),                       
		.reset_in11     (1'b0),                                // (terminated),                       
		.reset_req_in11 (1'b0),                                // (terminated),                       
		.reset_in12     (1'b0),                                // (terminated),                       
		.reset_req_in12 (1'b0),                                // (terminated),                       
		.reset_in13     (1'b0),                                // (terminated),                       
		.reset_req_in13 (1'b0),                                // (terminated),                       
		.reset_in14     (1'b0),                                // (terminated),                       
		.reset_req_in14 (1'b0),                                // (terminated),                       
		.reset_in15     (1'b0),                                // (terminated),                       
		.reset_req_in15 (1'b0)                                 // (terminated),                       
	);

endmodule
